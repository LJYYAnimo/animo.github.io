<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Pi NetWork</title>
      <link href="/Pi-NetWork.html"/>
      <url>/Pi-NetWork.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Pi Network是一个国外的手机免费挖矿项目，2019年的7月份传入国内，近期热度是越来越高，多家交易所也已关注，但是目前还属于期货，预计今年年底到明年年初就会有动作，所以还是建议大家不要错过！0投资，有可能赚几十万！</p></blockquote><h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h1><blockquote><p>Pi是由美国斯坦福大学博士团队（这个大学世界排名第二）开发的社交裂变的挖矿，创始人在2009年做了一款社交应用，人数达到了2000多万，创始人也因此获得了创新基金奖，所以来头很大。</p></blockquote><h1 id="下载方式"><a href="#下载方式" class="headerlink" title="下载方式"></a>下载方式</h1><p>手机用户直接打开链接下载 <a href="https://www.lanzous.com/i7ez8ji" target="_blank" rel="noopener">https://www.lanzous.com/i7ez8ji</a><br>电脑用户用手机扫描下方二维码下载<br><img alt data-src="/img/pi/FBC98980-8C21-4E92-A215-49B8168102D7.png" class="lozad"><br>以上是安卓用户的下载方式，苹果用户需要使用（非大陆地区）的ID才能下载！<br>这边免费提供一个香港的app账号密码！下载后注册步骤与安卓版本一样！<br>账号：<a href="mailto:w591db8f@icloud.com" target="_blank" rel="noopener">w591db8f@icloud.com</a><br>密码：Aa112211<br>登录账号后，苹果app上直接搜索pi就能找到，下载之后退出账号！<br>启动慢的话是因为外国服务器连接缓慢等等就OK。  </p><h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><blockquote><p>这个项目是全英文的，要认真仔细严格按照下面的流程操作，以免出错！  </p></blockquote><p>1、安装好后打开APP，点击“Continue with phone number”（中文意思：手机号注册）。<br><img alt data-src="/img/pi/2C7D18D2-2873-41A2-82A1-1E6E610C1A95.png" class="lozad"><br>2、然后点“小箭头”。<br><img alt data-src="/img/pi/3BD2D84C-19F9-4DF9-89C1-21E2F4F0960A.png" class="lozad"><br>3、找到“China（+86）”。<br><img alt data-src="/img/pi/D32A47D2-B4C5-43F4-AA74-3F10AAD2744F.png" class="lozad"><br>4、然后输入你的手机号码，点“Go”。<br><img alt data-src="/img/pi/5A9B7D91-35A5-4152-A0FD-832770DDF6C8.png" class="lozad"><br>5、然后在Passworld下面的方框里输入登录密码，在Verlfy your password下面的方框里再次输入登录密码，最后点“SUBMIT”。<br>注意：密码要求：字母加数字，字母必须包含大小写，密码不得低于8位<br><img alt data-src="/img/pi/3FED6211-C2E8-4D19-B1FE-2614CBB100E3.png" class="lozad"><br>6、然后在Flrst Name下面的方框输入“名”，在Last Mame下面的方框里输入“姓”，千万不要搞反了，最后在Choose your usemame下面的方框里输入“用户名”。<br>注意：这个用户名可以是纯字母，也可以是字母加数字，而且这个用户名也是你的个人邀请码，在你邀请别人时，让他们填写。<br>最后点“SUBMIT”，如果点了后，没有跳转，说明你的用户名已经有其它人用了，那你重新换个用户名就可以了。<br><img alt data-src="/img/pi/B28C25C0-56C8-484D-8B63-15F7980B1D2A.png" class="lozad"><br>7、在lnvltatlon code下面的方框里输入：Animo，这个是邀请码。<br><img alt data-src="/img/pi/5055B5DE-FAE2-43E5-9AF1-5ED69AC05191.png" class="lozad"><br>8、再根据提示一直点确认，跟着提示下一步，如下图：<br><img alt data-src="/img/pi/0EA8CCA6-9AB4-4D92-9E9C-90C0E11B5737.png" class="lozad"><br>9、完成上面的操作后，说明已经注册成功。直到出现下面这张图：<br><img alt data-src="/img/pi/773C237B-AD0C-42C8-AC4C-745DDA744BE5.png" class="lozad"><br>10、进行“手机号认证”。如下图：<br><img alt data-src="/img/pi/1739BD87-4AEA-4057-ADF8-DE8ADDAFF28A.png" class="lozad"><br>手机无法认证解决方法：手动输入接收号码：0016508220314，再把验证码发送出去。<br>11、然后就会自动挖矿，每天可以挖12个多币。需要注意的是：24小时后，会停止挖矿。需要手动点击挖矿页面的“闪电标志”重新开启挖矿，才会继续挖币，也就是每隔24小时都要手动点闪电标志开启下挖矿。<br><img alt data-src="/img/pi/ECF942A4-D0C9-4AE3-A30E-0489574A10C6.png" class="lozad">  </p><h1 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h1><p>1、一个手机登录一号，不要换号登录，有防刷机制，容易封号。</p><p>2、在pfofile（文件）页面，就是看自己姓名和邀请码的页面，最下面有个 SIGN OUT 点击后，就是退出APP，不要乱点，手机没验证的话，点这个退出，会造成挖的币全部消失！</p><p>那么挖的币怎么交易，值多少钱？  </p><p>答：明年Pi会上全球交易所，所以现在先尽情的挖，去屯币吧！预计明年3月14日上交易所交易。  </p><p>就说大家都知道的比特币吧，2009年比特币刚出来的时候，每天都可以免费挖几个，按现在的价格就是每天可以挖几十万元人民币。而且我要告诉大家的是，这个和比特币一样，是真正的区块链，不是资金盘，不需要投资，完全免费挖币，人人都一样。<br>比特币是国外人搞的，这个币也是国外人搞的，所以你懂的！零投资，零损失，每天花10秒点一下，或许将获得一份意想不到的财富！</p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringDataElasticSearch</title>
      <link href="/SpringDataElasticSearch.html"/>
      <url>/SpringDataElasticSearch.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Data Elasticsearch项目提供与Elasticsearch搜索引擎的集成。Spring Data Elasticsearch的关键功能领域是一个以POJO为中心的模型，用于与Elastichsearch文档交互并轻松编写存储库风格的数据访问层。</p></blockquote><h1 id="项目版本"><a href="#项目版本" class="headerlink" title="项目版本"></a>项目版本</h1><table><thead><tr><th align="center">名称</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center">spring-boot-starter-parent</td><td align="center">2.2.0.RELEASE</td></tr><tr><td align="center">spring-boot-starter-data-elasticsearch</td><td align="center">2.2.0.RELEASE</td></tr><tr><td align="center">spring-data-elasticsearch</td><td align="center">3.2.0.RELEASE</td></tr><tr><td align="center">elasticsearch-rest-high-level-client</td><td align="center">6.8.3</td></tr></tbody></table><h1 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h1><h2 id="Pom"><a href="#Pom" class="headerlink" title="Pom"></a>Pom</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">           &lt;exclusions&gt;</span><br><span class="line">               &lt;exclusion&gt;</span><br><span class="line">                   &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">                   &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">               &lt;/exclusion&gt;</span><br><span class="line">           &lt;/exclusions&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="Yml"><a href="#Yml" class="headerlink" title="Yml"></a>Yml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 用逗号隔开配置多个</span><br><span class="line">es:</span><br><span class="line">  connecteds: &quot;localhost:9200,&quot;</span><br></pre></td></tr></table></figure><h2 id="JavaConfig"><a href="#JavaConfig" class="headerlink" title="JavaConfig"></a>JavaConfig</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(prefix = &quot;es&quot;)</span><br><span class="line">@Component</span><br><span class="line">@Data</span><br><span class="line">public class EsConfigBean &#123;</span><br><span class="line">    private String connecteds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ElasticConnectedConfig extends AbstractElasticsearchConfiguration &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    EsConfigBean esConfigBean;</span><br><span class="line">    @Override</span><br><span class="line">    public RestHighLevelClient elasticsearchClient() &#123;</span><br><span class="line">        ClientConfiguration clientConfiguration = ClientConfiguration.builder()</span><br><span class="line">                .connectedTo(esConfigBean.getConnecteds().split(&quot;,&quot;))</span><br><span class="line">                .build();</span><br><span class="line">        return RestClients.create(clientConfiguration).rest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建索引库"><a href="#创建索引库" class="headerlink" title="创建索引库"></a>创建索引库</h1><h2 id="Id"><a href="#Id" class="headerlink" title="@Id"></a>@Id</h2><p>应用于字段级别以标记用于标识目的的字段。</p><h2 id="Document"><a href="#Document" class="headerlink" title="@Document"></a>@Document</h2><p>在类级应用，以指示该类是映射到数据库的候选类</p><ul><li>indexName 索引库名称</li><li>type 映射类型,如果未设置则使用小写类名</li><li>shards 分片数</li><li>replicas 副本数</li><li>refreshIntervall 索引刷新间隔时间 默认1s</li><li>indexStoreType 索引存储类型 默认fs</li><li>createIndex 是否创建索引库</li><li>versionType 配置管理版本 默认外部</li></ul><h2 id="Field"><a href="#Field" class="headerlink" title="@Field"></a>@Field</h2><p>在字段应用，设置该字段的映射属性</p><ul><li>name 对应ES的索引库映射名称 默认为java字段名</li><li>type Text, Integer, Long, Date, Float, Double, Boolean, Object, Auto, Nested, Ip, Attachment, Keyword.</li><li>format 定义日期的格式以及和pattern组合使用的自定义格式</li><li>store 标记原字段值是否应该存储在ES中，默认值为false。</li><li>analyzer 字段内容分词</li><li>searchAnalyzer 搜索内容分词</li><li>normalizer 自定义规格化器</li><li>copy_to 将多个文档字段复制到的目标字段。</li></ul><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 索引名称不能包含大写</span><br><span class="line">*/</span><br><span class="line">@Data</span><br><span class="line">@Document(indexName = &quot;es_mk&quot;,type = &quot;mk&quot;,shards = 1,replicas = 0)</span><br><span class="line">public class EsMk &#123;</span><br><span class="line">    @Id</span><br><span class="line">    private String id;</span><br><span class="line">    /**</span><br><span class="line">     * 标题字段</span><br><span class="line">     * name字段数据使用ik_max_word分析（细粒度）</span><br><span class="line">     * 搜索的时候使用ik_smart（粗粒度）</span><br><span class="line">     */</span><br><span class="line">    @Field(type = FieldType.Text,analyzer = &quot;ik_max_word&quot;,searchAnalyzer = &quot;ik_smart&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    /**</span><br><span class="line">     * 描述字段</span><br><span class="line">     * 同上面标题字段</span><br><span class="line">     */</span><br><span class="line">    @Field(type = FieldType.Text,analyzer = &quot;ik_max_word&quot;,searchAnalyzer = &quot;ik_smart&quot;)</span><br><span class="line">    private String description;</span><br><span class="line">    /**</span><br><span class="line">     * 编号字段</span><br><span class="line">     */</span><br><span class="line">    @Field(type = FieldType.Keyword)</span><br><span class="line">    private Integer number;</span><br><span class="line">    /**</span><br><span class="line">     * 价格</span><br><span class="line">     */</span><br><span class="line">    @Field(type = FieldType.Float)</span><br><span class="line">    private Float price;</span><br><span class="line">    /**</span><br><span class="line">     * 旧价格</span><br><span class="line">     */</span><br><span class="line">    @Field(type = FieldType.Float)</span><br><span class="line">    private Float oldPrice;</span><br><span class="line">    /***</span><br><span class="line">     * 新增时间 自定义</span><br><span class="line">     */</span><br><span class="line">    @Field(type = FieldType.Date,format = DateFormat.custom,pattern = &quot;yyyy‐MM‐dd HH:mm:ss||yyyy‐MM‐dd||epoch_millis&quot;)</span><br><span class="line">    private Date createdTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h2><p>由于亲测编写JavaBean直接启动并不能创建索引库和映射需要编写该Bean对应的Repository。<br>底层通过ElasticSearchTemplate和ElasticSearchRestTemplate操作Es。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public interface EsMkRepository extends ElasticsearchRepository&lt;EsMk,String&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="/img/es/39E65976-E874-445D-8720-9CA2788F4FA2.png" class="lozad"><br><img alt data-src="/img/es/A2072895-A9C8-4789-ABF6-6A335E802FE1.png" class="lozad"></p><h1 id="API操作"><a href="#API操作" class="headerlink" title="API操作"></a>API操作</h1><h2 id="保存OR更新"><a href="#保存OR更新" class="headerlink" title="保存OR更新"></a>保存OR更新</h2><p>我们操作都基于Repository所以要引入相对于的索引库的Repository，保存和更新都使用Save需要主键。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># save方法存在即更新基于ID主键,反之保存。</span><br><span class="line"> @Test</span><br><span class="line">    public void save()&#123;</span><br><span class="line">        EsMk esMk = new EsMk();</span><br><span class="line">        esMk.setName(&quot;Springboot 微信小程序 – 微信登录功能实战&quot;);</span><br><span class="line">        esMk.setDescription(&quot;简介：通过学习本课程可以掌握如何使用微信api，如何使用httpClient工具跨服务器调用微信url，掌握如何解析string到自己封装的model，掌握自定义会话保存至redis&quot;);</span><br><span class="line">        esMk.setNumber(1059);</span><br><span class="line">        esMk.setPrice(0.00F);</span><br><span class="line">        esMk.setOldPrice(0.00F);</span><br><span class="line">        esMk.setId(System.currentTimeMillis()+&quot;&quot;);</span><br><span class="line">        esMk.setCreatedTime(new Date());</span><br><span class="line">        esMkRepository.save(esMk);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="TermQuery"><a href="#TermQuery" class="headerlink" title="TermQuery"></a>TermQuery</h2><h3 id="单字段查询"><a href="#单字段查询" class="headerlink" title="单字段查询"></a>单字段查询</h3><p>TermQuery查询不会进行分词,在IK分词的时候默认会把大写转换成小写。所以我们库里存的是SpringBoot，但是搜索如果使用SpringBoot的话是搜索不到的必须全部小写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;term&quot; : &#123; &quot;name&quot; : &quot;springboot&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># Java</span><br><span class="line">TermQueryBuilder termQueryBuilder = new TermQueryBuilder(&quot;name&quot;,&quot;springboot&quot;);</span><br><span class="line">NativeSearchQuery nativeSearchQuery = new NativeSearchQuery(termQueryBuilder);</span><br><span class="line">Page&lt;EsMk&gt; page = esMkRepository.search(nativeSearchQuery);</span><br></pre></td></tr></table></figure><h3 id="source过滤"><a href="#source过滤" class="headerlink" title="_source过滤"></a>_source过滤</h3><p>通过_source字段名称过滤显示的字段值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;term&quot; : &#123; &quot;name&quot; : &quot;springboot&quot; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;_source&quot;:[&quot;name&quot;,&quot;description&quot;]</span><br><span class="line">&#125;</span><br><span class="line"># Java</span><br><span class="line">//精确查询不分词</span><br><span class="line">TermQueryBuilder termQueryBuilder = new TermQueryBuilder(&quot;name&quot;,&quot;springboot&quot;);</span><br><span class="line">NativeSearchQuery nativeSearchQuery = new NativeSearchQuery(termQueryBuilder);</span><br><span class="line">//需要显示的字段</span><br><span class="line">String[] includes = &#123;&quot;name&quot;,&quot;description&quot;,&quot;price&quot;&#125;;</span><br><span class="line">FetchSourceFilter fetchSourceFilter = new FetchSourceFilter(includes,null);</span><br><span class="line">nativeSearchQuery.addSourceFilter(fetchSourceFilter);</span><br><span class="line">Page&lt;EsMk&gt; page = esMkRepository.search(nativeSearchQuery);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 搜索引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Es安装IK分词器</title>
      <link href="/Es%E5%AE%89%E8%A3%85IK%E5%88%86%E8%AF%8D%E5%99%A8.html"/>
      <url>/Es%E5%AE%89%E8%A3%85IK%E5%88%86%E8%AF%8D%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/medcl/elasticsearch-analysis-ik</span><br><span class="line"></span><br><span class="line">cd elasticsearch-analysis-ik</span><br><span class="line"># http访问Es端口即可看到Es版本号 version - number</span><br><span class="line"># git checkout tags/v6.8.4</span><br><span class="line">git checkout tags/&#123;version&#125; </span><br><span class="line"></span><br><span class="line">mvn clean</span><br><span class="line"></span><br><span class="line">mvn compile</span><br><span class="line"></span><br><span class="line">mvn package</span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>进入打包好的ik目录下的/target/releases/elasticsearch-analysis-ik-*.zip解压缩到es/plugins,然后重新启动es。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="Caused-by-java-nio-file-FileSystemException-usr-share-elasticsearch-plugins-DS-Store-plugin-descriptor-properties-Not-a-directory"><a href="#Caused-by-java-nio-file-FileSystemException-usr-share-elasticsearch-plugins-DS-Store-plugin-descriptor-properties-Not-a-directory" class="headerlink" title="Caused by: java.nio.file.FileSystemException: /usr/share/elasticsearch/plugins/.DS_Store/plugin-descriptor.properties: Not a directory"></a>Caused by: java.nio.file.FileSystemException: /usr/share/elasticsearch/plugins/.DS_Store/plugin-descriptor.properties: Not a directory</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.nio.file.FileSystemException: /usr/share/elasticsearch/plugins/.DS_Store/plugin-descriptor.properties: Not a directory</span><br><span class="line">at sun.nio.fs.UnixException.translateToIOException(UnixException.java:100) ~[?:?]</span><br><span class="line">at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111) ~[?:?]</span><br><span class="line">at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116) ~[?:?]</span><br><span class="line">at sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:219) ~[?:?]</span><br><span class="line">at java.nio.file.Files.newByteChannel(Files.java:374) ~[?:?]</span><br><span class="line">at java.nio.file.Files.newByteChannel(Files.java:425) ~[?:?]</span><br><span class="line">at java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:420) ~[?:?]</span><br><span class="line">at java.nio.file.Files.newInputStream(Files.java:159) ~[?:?]</span><br><span class="line">at org.elasticsearch.plugins.PluginInfo.readFromProperties(PluginInfo.java:162) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.plugins.PluginsService.readPluginBundle(PluginsService.java:398) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.plugins.PluginsService.findBundles(PluginsService.java:386) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.plugins.PluginsService.getPluginBundles(PluginsService.java:379) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.plugins.PluginsService.&lt;init&gt;(PluginsService.java:151) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:339) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:266) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap$5.&lt;init&gt;(Bootstrap.java:212) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:212) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:333) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:159) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">... 6 more</span><br></pre></td></tr></table></figure><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>由于使用MacBook在es/plugins目录下解压的IK分词器导致会自动创建.DS_Store从而让Es启动失败。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>如果出现上述问题的话需要删除plugins重新创建其次在外部解压好之后再放入。</p><h2 id="Caused-by-java-lang-IllegalArgumentException-Plugin-analysis-ik-was-built-for-Elasticsearch-version-6-5-0-but-version-6-8-4-is-running"><a href="#Caused-by-java-lang-IllegalArgumentException-Plugin-analysis-ik-was-built-for-Elasticsearch-version-6-5-0-but-version-6-8-4-is-running" class="headerlink" title="Caused by: java.lang.IllegalArgumentException: Plugin [analysis-ik] was built for Elasticsearch version 6.5.0 but version 6.8.4 is running"></a>Caused by: java.lang.IllegalArgumentException: Plugin [analysis-ik] was built for Elasticsearch version 6.5.0 but version 6.8.4 is running</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalArgumentException: Plugin [analysis-ik] was built for Elasticsearch version 6.5.0 but version 6.8.4 is running</span><br><span class="line">at org.elasticsearch.plugins.PluginsService.verifyCompatibility(PluginsService.java:346) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.plugins.PluginsService.loadBundle(PluginsService.java:531) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.plugins.PluginsService.loadBundles(PluginsService.java:471) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.plugins.PluginsService.&lt;init&gt;(PluginsService.java:163) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:339) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:266) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap$5.&lt;init&gt;(Bootstrap.java:212) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:212) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:333) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:159) ~[elasticsearch-6.8.4.jar:6.8.4]</span><br><span class="line">... 6 more</span><br></pre></td></tr></table></figure><h3 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h3><p>虽然下载的时候指定了分支为6.8.4版本与之Es对应但是打包之后是6.5.0。</p><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><p>修改ik目录下的pom.xml文件,修改elasticsearch.version的版本为当前Es版本。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="默认分词器"><a href="#默认分词器" class="headerlink" title="默认分词器"></a>默认分词器</h2><p>默认分词器对中文会分成单个词组。<br><img alt data-src="/img/es/8C1EDB43-CB90-4071-BDE7-8F61C536B319.png" class="lozad"></p><h2 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h2><h3 id="ik-max-word"><a href="#ik-max-word" class="headerlink" title="ik_max_word"></a>ik_max_word</h3><p>会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合，适合 Term Query；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;text&quot;: &quot;中华人民共和国国歌&quot;,&quot;analyzer&quot;:&quot;ik_max_word&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="/img/es/82AB795C-4753-461F-934F-30A1508C103A.png" class="lozad"></p><h3 id="ik-smart"><a href="#ik-smart" class="headerlink" title="ik_smart"></a>ik_smart</h3><p>会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”，适合 Phrase 查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;text&quot;: &quot;中华人民共和国国歌&quot;,&quot;analyzer&quot;:&quot;ik_smart&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="/img/es/A7CBA58D-EE63-4CFB-983B-AA73085C4D49.png" class="lozad"></p><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="静态字典"><a href="#静态字典" class="headerlink" title="静态字典"></a>静态字典</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 未使用静态字典（自定义本地字典）</span><br><span class="line">&#123;</span><br><span class="line">    &quot;text&quot;: &quot;慕课网&quot;,&quot;analyzer&quot;:&quot;ik_smart&quot;</span><br><span class="line">&#125; </span><br><span class="line">or</span><br><span class="line">&#123;</span><br><span class="line">    &quot;text&quot;: &quot;慕课网&quot;,&quot;analyzer&quot;:&quot;ik_max_word&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="/img/es/4FF18E55-5549-427C-8349-0333C17366D9.png" class="lozad"><br><img alt data-src="/img/es/1AC1D0A4-54C7-4565-BCA7-EB644C9007B9.png" class="lozad"><br>在ik/config目录（也可以其他目录）下创建一个自定义的字典这里我命名为static.dic。<br>修改config下的IKAnalyzer.cfg.xml如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt;</span><br><span class="line">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br><span class="line">&lt;entry key=&quot;ext_dict&quot;&gt;static.dic&lt;/entry&gt;</span><br><span class="line"> &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span><br><span class="line">&lt;entry key=&quot;ext_stopwords&quot;&gt;&lt;/entry&gt;</span><br><span class="line">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span><br><span class="line">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span><br><span class="line">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span><br><span class="line">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>修改完之后重启Es然后在测试之前数据的效果。<br><img alt data-src="/img/es/AD2799D0-9E65-4AED-8882-F332F20EC484.png" class="lozad"><br><img alt data-src="/img/es/DAEFA1E6-83A1-4818-9DB1-3412F23D4AC3.png" class="lozad"></p><h2 id="动态字典"><a href="#动态字典" class="headerlink" title="动态字典"></a>动态字典</h2>]]></content>
      
      
      <categories>
          
          <category> 搜索引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Docker</title>
      <link href="/Linux%E5%AE%89%E8%A3%85Docker.html"/>
      <url>/Linux%E5%AE%89%E8%A3%85Docker.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p></blockquote><h1 id="内核版本"><a href="#内核版本" class="headerlink" title="内核版本"></a>内核版本</h1><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS版本是否支持 Docker 。可以通过 uname -r 命令查看你当前的内核版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><h1 id="yum更新"><a href="#yum更新" class="headerlink" title="yum更新"></a>yum更新</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 切换root权限登录CentOS</span><br><span class="line">yum update</span><br></pre></td></tr></table></figure><h1 id="卸载旧版"><a href="#卸载旧版" class="headerlink" title="卸载旧版"></a>卸载旧版</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果安装过旧版</span><br><span class="line">sudo yum remove docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure><h1 id="依赖软件包"><a href="#依赖软件包" class="headerlink" title="依赖软件包"></a>依赖软件包</h1><p>yum-util提供yum-config-manager,另外两个是devicemapper的依赖包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h1 id="设置yum源"><a href="#设置yum源" class="headerlink" title="设置yum源"></a>设置yum源</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyum.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查询Docker版本</span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line"># 例如：sudo yum install docker-ce-18.03.1.ce</span><br><span class="line">sudo yum install &lt;FQPN&gt;</span><br><span class="line"></span><br><span class="line"># 加入开机自启</span><br><span class="line">sudo systemctl start dockersudo systemctl enable docker</span><br><span class="line"></span><br><span class="line"># 验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><h1 id="国内镜像"><a href="#国内镜像" class="headerlink" title="国内镜像"></a>国内镜像</h1><p>网易镜像中心：<a href="https://c.163.com/hub#/m/home/" target="_blank" rel="noopener">https://c.163.com/hub#/m/home/</a><br>daocloud镜像市场：<a href="https://hub.daocloud.io/" target="_blank" rel="noopener">https://hub.daocloud.io/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 不同CentOS启动方式不一样自选</span><br><span class="line">systemctl restart docker.service</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure><h2 id="网易镜像"><a href="#网易镜像" class="headerlink" title="网易镜像"></a>网易镜像</h2><p>创建/修改,/etc/docker/daemon.json。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;] </span><br><span class="line">&#125;</span><br><span class="line">#修改之后重启</span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure><h2 id="阿里镜像"><a href="#阿里镜像" class="headerlink" title="阿里镜像"></a>阿里镜像</h2><p>创建/修改,/etc/docker/daemon.json。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;http://ef017c13.m.daocloud.io&quot;],</span><br><span class="line">    &quot;live-restore&quot;: true</span><br><span class="line">&#125;</span><br><span class="line"># 修改之后重启</span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure><h2 id="命令添加"><a href="#命令添加" class="headerlink" title="命令添加"></a>命令添加</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br><span class="line">#修改之后重启</span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure><h1 id="存储位置"><a href="#存储位置" class="headerlink" title="存储位置"></a>存储位置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 执行命令</span><br><span class="line">docker info </span><br><span class="line">#文件位置</span><br><span class="line">Docker Root Dir:/var/lib/docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装ElasticSearch</title>
      <link href="/Docker%E5%AE%89%E8%A3%85ElasticSearch.html"/>
      <url>/Docker%E5%AE%89%E8%A3%85ElasticSearch.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。ElasticSearch用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。官方客户端在Java、.NET（C#）、PHP、Python、Apache Groovy、Ruby和许多其他语言中都是可用的。根据DB-Engines的排名显示，Elasticsearch是最受欢迎的企业搜索引擎，其次是Apache Solr，也是基于Lucene。</p></blockquote><h1 id="安装ElasticSearch"><a href="#安装ElasticSearch" class="headerlink" title="安装ElasticSearch"></a>安装ElasticSearch</h1><p><a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a><br><a href="https://hub.docker.com/_/elasticsearch" target="_blank" rel="noopener">https://hub.docker.com/_/elasticsearch</a></p><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#这里不写版本拉取最新版</span><br><span class="line">docker pull elasticsearch </span><br><span class="line">Error response from daemon: manifest for elasticsearch:latest not found</span><br><span class="line"># 未找到最新版本这里我们需要手动指定版本了</span><br><span class="line">docker pull elasticsearch:6.8.4</span><br></pre></td></tr></table></figure><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建临时容器</span><br><span class="line">docker run -d --name tempelasticsearch elasticsearch:6.8.4 </span><br><span class="line"># 拉取配置到本地宿主机映射 到后面可以在本地多复制几份</span><br><span class="line">sudo docker cp tempelasticsearch:/usr/share/elasticsearch /usr/local/elasticsearch1</span><br><span class="line"># 删除临时容器</span><br><span class="line">docker rm -f tempelasticsearch</span><br><span class="line"># 创建容器 这里会出现拒绝挂载 具体操作在本博的Nginx 其次不能直接设置/usr/local为挂载目录这是docker保留的 但是可以设置子目录</span><br><span class="line">docker run -d --name elasticsearch1 -p 9200:9200 -p 9300:9300 -v /usr/local/elasticsearch1:/usr/share/elasticsearch elasticsearch:6.8.4</span><br></pre></td></tr></table></figure><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><p>创建容器之后运行 docker start elasticsearch1 之后 docker ps 未发现容器启动。<br>通过docker logs –since 30m elasticsearch1 查看日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.nio.file.AccessDeniedException: /usr/share/elasticsearch/config/jvm.options</span><br></pre></td></tr></table></figure><p>这里由于和宿主机挂载导致读取不到jvm.options通过在宿主机给挂载文件加权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $(whoami) /usr/local/elasticsearch1</span><br></pre></td></tr></table></figure><p>之后可通过docker ps 查看elasticsearch已运行通过访问localhost:9200可校验是否成功（启动慢）<br><img alt data-src="/img/docker/4599337E-766E-4760-A003-C3AFFBFC5DD0.png" class="lozad"></p><h1 id="安装ElasticSearch-Head"><a href="#安装ElasticSearch-Head" class="headerlink" title="安装ElasticSearch-Head"></a>安装ElasticSearch-Head</h1><p><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head</a></p><h2 id="Node安装"><a href="#Node安装" class="headerlink" title="Node安装"></a>Node安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/mobz/elasticsearch-head.git</span><br><span class="line">cd elasticsearch-head</span><br><span class="line">npm install</span><br><span class="line">npm run start</span><br><span class="line">open http://localhost:9100/</span><br></pre></td></tr></table></figure><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull mobz/elasticsearch-head:5-alpine</span><br><span class="line">docker run -p 9100:9100 mobz/elasticsearch-head:5-alpine</span><br></pre></td></tr></table></figure><h2 id="连接ElasticSearch"><a href="#连接ElasticSearch" class="headerlink" title="连接ElasticSearch"></a>连接ElasticSearch</h2><p>通过访问ElasticSearch-Head（ <a href="http://localhost:9100" target="_blank" rel="noopener">http://localhost:9100</a> ）连接 <a href="http://localhost:9200" target="_blank" rel="noopener">http://localhost:9200</a><br><img alt data-src="/img/docker/5F1A9A3E-084B-4549-A529-099FC64BC497.png" class="lozad"><br>可以发现这里跨域访问被拦截了,我们需要修改端口为9200的config/elasticearch.yml直接宿主机上修改。elasticearch.yml配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: &quot;docker-cluster&quot;</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">#跨域访问允许的域名地址</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">#(允许所有域名)以上使 用正则 </span><br><span class="line">http.cors.allow-origin: /.*/</span><br></pre></td></tr></table></figure><p><img alt data-src="/img/docker/604857F7-9652-4CAD-AD2F-96B263088CDF.png" class="lozad"></p>]]></content>
      
      
      <categories>
          
          <category> 搜索引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用FastDFS</title>
      <link href="/SpringBoot%E4%BD%BF%E7%94%A8FastDFS.html"/>
      <url>/SpringBoot%E4%BD%BF%E7%94%A8FastDFS.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h1><ul><li>初始化ClientGlobal配置基本连接信息</li><li>获取TrackerClient客户端</li><li>TrackerClient打开连接获取TrackerServer</li><li>TrackerClient获取StorageServer服务端需要TrackerServer参数</li><li>获取StorageClient1(TrackerServer,StorageServer)</li><li>所有基本操作都基于StorageClient1进行</li></ul><h1 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h1><h2 id="配置代码"><a href="#配置代码" class="headerlink" title="配置代码"></a>配置代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">文件名称:application.yml</span><br><span class="line">fastdfs:</span><br><span class="line">  connect_timeout_in_seconds: 5</span><br><span class="line">  network_timeout_in_seconds: 30</span><br><span class="line">  charset: utf-8</span><br><span class="line">  tracker_servers: 192.168.168.231:22122</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">文件名称:FastDFSBean</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;fastdfs&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class FastDFSBean &#123;</span><br><span class="line">    private int connectTimeoutInSeconds;</span><br><span class="line">    private int networkTimeoutInSeconds;</span><br><span class="line">    private String charset;</span><br><span class="line">    private String trackerServers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">文件名称:FastDFSConfig</span><br><span class="line">@Component</span><br><span class="line">@Order(1)</span><br><span class="line">public class FastDFSConfig implements ApplicationRunner &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private FastDFSBean fastDFSBean;</span><br><span class="line">    @Override</span><br><span class="line">    public void run(ApplicationArguments args) throws Exception &#123;</span><br><span class="line">        ClientGlobal.setG_connect_timeout(fastDFSBean.getConnectTimeoutInSeconds());</span><br><span class="line">        ClientGlobal.setG_network_timeout(fastDFSBean.getNetworkTimeoutInSeconds());</span><br><span class="line">        ClientGlobal.setG_charset(fastDFSBean.getCharset());</span><br><span class="line">        try &#123;</span><br><span class="line">            ClientGlobal.initByTrackers(fastDFSBean.getTrackerServers());</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (MyException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;fastDFS配置成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><h3 id="公用私有方法"><a href="#公用私有方法" class="headerlink" title="公用私有方法"></a>公用私有方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 最终操作都基于StorageClient1 所以封装获取StorageClient1的方法</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private StorageClient1 getStorageClient1()&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //创建Tracker客户端</span><br><span class="line">        TrackerClient trackerClient = new TrackerClient();</span><br><span class="line">        //获取Tracker服务端</span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        //创建Storage服务端</span><br><span class="line">        StorageServer storageServer = trackerClient.getStoreStorage(trackerServer);</span><br><span class="line">        //创建Storage客户端</span><br><span class="line">        StorageClient1 storageClient1 = new StorageClient1(trackerServer,storageServer);</span><br><span class="line">        return storageClient1;</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.out.println(&quot;链接出错&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public String upload(MultipartFile file)&#123;</span><br><span class="line">    StorageClient1 storageClient1 = getStorageClient1();</span><br><span class="line">    try &#123;</span><br><span class="line">        //文件字节</span><br><span class="line">        byte[] bytes = file.getBytes();</span><br><span class="line">        //文件原始名称</span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        //获取扩展名称</span><br><span class="line">        String file_ext_name = originalFilename.substring(originalFilename.lastIndexOf(&quot;.&quot;) + 1);</span><br><span class="line">        String fileId = storageClient1.upload_file1(bytes,file_ext_name,null);</span><br><span class="line">        System.out.println(&quot;文件ID:&quot;+fileId);</span><br><span class="line">        return fileId;</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (MyException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 测试类专用</span><br><span class="line"> * 由于测试代码无法使用MultipartFile 所以这个测试专用</span><br><span class="line"> * @param local_filename 文件全路径</span><br><span class="line"> * @param file_ext_name 文件扩展名</span><br><span class="line"> * @param meta_list 源文件信息 可以为Null</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public String uploadTest(String local_filename, String file_ext_name, NameValuePair[] meta_list)&#123;</span><br><span class="line">    StorageClient1 storageClient1 = getStorageClient1();</span><br><span class="line">    try &#123;</span><br><span class="line">        String fileId = storageClient1.upload_file1(local_filename, file_ext_name, meta_list);</span><br><span class="line">        System.out.println(&quot;文件ID:&quot;+fileId);</span><br><span class="line">        return fileId;</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (MyException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 文件下载</span><br><span class="line"> * @param fileId 文件ID</span><br><span class="line"> * @param pathUrl 需要下载到哪个路径</span><br><span class="line"> */</span><br><span class="line">public void download(String fileId,String pathUrl)&#123;</span><br><span class="line">    StorageClient1 storageClient1 = getStorageClient1();</span><br><span class="line">    FileOutputStream fileOutputStream = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        byte[] bytes = storageClient1.download_file1(fileId);</span><br><span class="line">        fileOutputStream = new FileOutputStream(new File(pathUrl));</span><br><span class="line">        fileOutputStream.write(bytes);</span><br><span class="line">        System.out.println(&quot;写入成功，文件路径:&quot;+pathUrl);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (MyException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;finally &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 删除文件</span><br><span class="line"> * @param fileId 文件ID</span><br><span class="line"> */</span><br><span class="line">public void delete(String fileId)&#123;</span><br><span class="line">    StorageClient1 storageClient1 = getStorageClient1();</span><br><span class="line">    try &#123;</span><br><span class="line">        int result = storageClient1.delete_file1(fileId);</span><br><span class="line">        System.out.println(&quot;删除结果反馈:&quot;+result);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (MyException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/fastdfs&quot;)</span><br><span class="line">public class FastDFSController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private FastDFSService fastDFSService;</span><br><span class="line">    @GetMapping(&quot;/upload&quot;)</span><br><span class="line">    public String upload(@RequestParam(&quot;file&quot;) MultipartFile file)&#123;</span><br><span class="line">        return fastDFSService.upload(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目测试"><a href="#项目测试" class="headerlink" title="项目测试"></a>项目测试</h1><h2 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h2><p><img alt data-src="/img/SpringBoot/E333895B-E268-415C-9FC6-656175CF1EC1.png" class="lozad"><br><img alt data-src="/img/SpringBoot/2EF50B7D-0FF3-44C0-847C-7F6A03999FEA.png" class="lozad"></p><h2 id="Service-1"><a href="#Service-1" class="headerlink" title="Service"></a>Service</h2><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p><img alt data-src="/img/SpringBoot/DF3DEF51-FA18-451D-A543-58227B6D1B35.png" class="lozad"><br><img alt data-src="/img/SpringBoot/8EBB68EC-0CEF-46AA-A876-5514F321DAEA.png" class="lozad"></p><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p><img alt data-src="/img/SpringBoot/8E9E69D7-C6FB-4D85-B761-2EFC7A81A8F0.png" class="lozad"><br><img alt data-src="/img/SpringBoot/12792CD5-EB04-44EE-8E76-70C9027EC3B0.png" class="lozad"><br><img alt data-src="/img/SpringBoot/1376C271-5DBB-4491-B5F6-58E6497AAE10.png" class="lozad">  </p><h3 id="删除文件-1"><a href="#删除文件-1" class="headerlink" title="删除文件"></a>删除文件</h3><p><img alt data-src="/img/SpringBoot/8306AA97-5F1E-427B-A52D-9F8C68627222.png" class="lozad"><br><img alt data-src="/img/SpringBoot/612BB459-11C7-4B12-B26D-D324CAAC2FDD.png" class="lozad"><br><img alt data-src="/img/SpringBoot/4ED100E7-54A4-414B-A193-569926E86DD5.png" class="lozad">  </p><blockquote><p>该项目代码只作为测试代码,如需使用还得按需修改、调整。项目地址:<a href="https://github.com/LJYYAnimo/SpringBoot-Example/tree/master/SpringBoot-FastDFS" target="_blank" rel="noopener">https://github.com/LJYYAnimo/SpringBoot-Example/tree/master/SpringBoot-FastDFS</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastDFS Storage安装单机测试</title>
      <link href="/FastDFS-Storage%E5%AE%89%E8%A3%85%E5%8D%95%E6%9C%BA%E6%B5%8B%E8%AF%95.html"/>
      <url>/FastDFS-Storage%E5%AE%89%E8%A3%85%E5%8D%95%E6%9C%BA%E6%B5%8B%E8%AF%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="Storage配置"><a href="#Storage配置" class="headerlink" title="Storage配置"></a>Storage配置</h1><p>在另一台Liunx上安装Storage是，需要在此步骤之前需要搭建环境（重复步骤1-8）具体参考本站FastDFS-Tracker安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">文件位置:/etc/fdfs/storage.conf</span><br><span class="line">端口:port=23000  # storage服务端口（默认23000,一般不修改）</span><br><span class="line">组名:group_name=group1</span><br><span class="line">向tracker发送心跳间隔时间:heart_beat_interval=30</span><br><span class="line">storage基础目录:base_path=/home/fastdfs  # 数据和日志文件存储根目录</span><br><span class="line">磁盘存储目录（文件存储）:store_path0=/home/fastdfs/fdfs_storage  # 第一个存储目录</span><br><span class="line">多个目录换行加 store_path1=xxx store_path2=xxx</span><br><span class="line">上报tracker地址:tracker_server=192.168.168.231:22122  # tracker服务器IP和端口</span><br><span class="line">多个地址换行加 tracker_server=ip:port</span><br><span class="line">http.server_port=8888  # http访问文件的端口(默认8888,看情况修改,和nginx中保持一致)</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#方式一关闭防火墙（两个服务有需要关闭）</span><br><span class="line">systemctl stop firewalld.service #关闭</span><br><span class="line"></span><br><span class="line">#方式二在防火墙中打开跟踪端口</span><br><span class="line">#在tracker服务器</span><br><span class="line">    vi /etc/sysconfig/iptables</span><br><span class="line">    添加如下端口行：</span><br><span class="line">    -A INPUT -m state --state NEW -m tcp -p tcp --dport 22122 -j ACCEPT</span><br><span class="line">重启防火墙：</span><br><span class="line">    # service iptables restart</span><br><span class="line"></span><br><span class="line">#在storage服务器</span><br><span class="line">    vi /etc/sysconfig/iptables</span><br><span class="line">    添加如下端口行：</span><br><span class="line">    -A INPUT -m state --state NEW -m tcp -p tcp --dport 23000 -j ACCEPT</span><br><span class="line">重启防火墙：</span><br><span class="line">    # service iptables restart</span><br></pre></td></tr></table></figure><h2 id="Tracker启动"><a href="#Tracker启动" class="headerlink" title="Tracker启动"></a>Tracker启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/fdfs_trackerd start #启动tracker服务</span><br><span class="line">/etc/init.d/fdfs_trackerd restart #重启动tracker服务</span><br><span class="line">/etc/init.d/fdfs_trackerd stop #停止tracker服务</span><br><span class="line">chkconfig fdfs_trackerd on #自启动tracker服务</span><br></pre></td></tr></table></figure><p>初次启动成功后会在Tracker基础目录（base_path）中创建logs和data目录。<br><img alt data-src="/img/fastdfs/97061A09-18B9-4616-947D-2606063BB83E.png" class="lozad"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过名称查看是否启动成功:netstat -unltp|grep fdfs</span><br></pre></td></tr></table></figure><p><img alt data-src="/img/fastdfs/3200023D-B687-4BC1-98E5-BCADDF064A03.png" class="lozad"></p><h2 id="Storage启动"><a href="#Storage启动" class="headerlink" title="Storage启动"></a>Storage启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/fdfs_storaged start #启动storage服务</span><br><span class="line">/etc/init.d/fdfs_storaged restart #重动storage服务</span><br><span class="line">/etc/init.d/fdfs_storaged stop #停止动storage服务</span><br><span class="line">chkconfig fdfs_storaged on #自启动storage服务</span><br></pre></td></tr></table></figure><p>剩余操作和上方Tracker一致。</p><h2 id="通信检测"><a href="#通信检测" class="headerlink" title="通信检测"></a>通信检测</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_monitor /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure><p><img alt data-src="/img/fastdfs/521C342A-0730-4722-A78F-C06544FD8FF3.png" class="lozad"></p><h1 id="上传测试"><a href="#上传测试" class="headerlink" title="上传测试"></a>上传测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文件位置:/etc/fdfs/client.conf</span><br><span class="line">base_path=/home/fastdfs</span><br><span class="line">tracker_server=192.168.168.231:22122    #tracker服务器IP和端口</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">测试命令</span><br><span class="line">fdfs_upload_file /etc/fdfs/client.conf /usr/local/src/nginx-1.15.4.tar.gz</span><br><span class="line">（第二个地址为测试的文件地址可自行通过xftp上传图片之后填写图片路径）</span><br></pre></td></tr></table></figure><p><img alt data-src="/img/fastdfs/9EF2F8F5-539A-4684-9D0F-248A296F5AD3.png" class="lozad"></p><h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">文件位置:/etc/fdfs/mod_fastdfs.conf</span><br><span class="line">tracker_server=192.168.168.231:22122  #tracker服务器IP和端口</span><br><span class="line">url_have_group_name=true</span><br><span class="line">store_path0=/home/fastdfs/fdfs_storage （如多个则配置path1、path2）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">文件位置:/usr/local/nginx/conf/nginx.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen       8888;    ## 该端口为storage.conf中的http.server_port相同</span><br><span class="line">    location ~/group[0-9]/ &#123;</span><br><span class="line">        ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 修改之后</span><br><span class="line">nginx -s reload #重启nginx || /usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p>这这是测试命令中返回的文件ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.168.231:8888/group1/M00/00/00/wKio6F25Sj-Ab6Z9AA-itrfn0m4.tar.gz</span><br></pre></td></tr></table></figure><p><img alt data-src="/img/fastdfs/528E38CE-6C0D-4677-9FC1-83ACCC683330.png" class="lozad"></p>]]></content>
      
      
      <categories>
          
          <category> 文件服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastDFS Tracker安装</title>
      <link href="/FastDFS-Tracker%E5%AE%89%E8%A3%85.html"/>
      <url>/FastDFS-Tracker%E5%AE%89%E8%A3%85.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><table><thead><tr><th align="center">Key</th><th align="center">Value</th></tr></thead><tbody><tr><td align="center">操作系统</td><td align="center">CentOS 7.X</td></tr><tr><td align="center">远程连接</td><td align="center">Xshell</td></tr><tr><td align="center">文件传输</td><td align="center">Xftp</td></tr><tr><td align="center">Tracker Server</td><td align="center">192.168.168.231</td></tr><tr><td align="center">Storage Server</td><td align="center">192.168.168.232</td></tr></tbody></table><h1 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim -y</span><br></pre></td></tr></table></figure><p><img alt data-src="/img/fastdfs/7020E032-E233-4967-B750-28087C21721E.png" class="lozad"></p><h1 id="磁盘目录"><a href="#磁盘目录" class="headerlink" title="磁盘目录"></a>磁盘目录</h1><table><thead><tr><th align="center">Key</th><th align="center">Value</th></tr></thead><tbody><tr><td align="center">所有安装包</td><td align="center">/usr/local/src</td></tr><tr><td align="center">数据存储位置</td><td align="center">/home/fastdfs</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/fastdfs      #创建数据存储目录</span><br><span class="line">cd /usr/local/src    #切换到安装目录准备下载安装包</span><br></pre></td></tr></table></figure><h1 id="安装libfatscommon"><a href="#安装libfatscommon" class="headerlink" title="安装libfatscommon"></a>安装libfatscommon</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/happyfish100/libfastcommon.git --depth 1    #下载</span><br><span class="line">cd libfastcommon/    #切换到libfastcommon文件夹下</span><br><span class="line">./make.sh &amp;&amp; ./make.sh install   #编译安装</span><br></pre></td></tr></table></figure><p><img alt data-src="/img/fastdfs/E8D0B0DB-C96A-4B5F-9591-9A9F119AA5D0.png" class="lozad"></p><h1 id="安装FastDFS"><a href="#安装FastDFS" class="headerlink" title="安装FastDFS"></a>安装FastDFS</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd ../ #返回上一级目录</span><br><span class="line">git clone https://github.com/happyfish100/fastdfs.git --depth 1   #下载</span><br><span class="line">cd fastdfs/   #切换到fastdfs文件夹下</span><br><span class="line">./make.sh &amp;&amp; ./make.sh install #编译安装</span><br><span class="line">#配置文件准备</span><br><span class="line">cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf   #把文件复制一份，去掉.sample</span><br><span class="line">cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf   #把文件复制一份，去掉.sample</span><br><span class="line">cp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf     ##把文件复制一份，去掉.sample,客户端文件，测试用</span><br><span class="line">cp /usr/local/src/fastdfs/conf/http.conf /etc/fdfs/       #供nginx访问使用</span><br><span class="line">cp /usr/local/src/fastdfs/conf/mime.types /etc/fdfs/     #供nginx访问使用</span><br></pre></td></tr></table></figure><p><img alt data-src="/img/fastdfs/CD668118-5942-4CC3-A4BB-A69BB65F0C8D.png" class="lozad"></p><p><img alt data-src="/img/fastdfs/224E2FEF-5933-4816-ACFD-9A6522A761AB.png" class="lozad"></p><h1 id="安装fastdfs-nginx-module"><a href="#安装fastdfs-nginx-module" class="headerlink" title="安装fastdfs-nginx-module"></a>安装fastdfs-nginx-module</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../ #返回上一级目录</span><br><span class="line">git clone https://github.com/happyfish100/fastdfs-nginx-module.git --depth 1    #下载</span><br><span class="line">cp /usr/local/src/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs   #复制到etc文件夹下的fdfs文件夹下</span><br></pre></td></tr></table></figure><p><img alt data-src="/img/fastdfs/49E6F93C-DB97-485C-87C7-E9400D1E712E.png" class="lozad"></p><h1 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd ../ #返回上一级目录</span><br><span class="line">wget http://nginx.org/download/nginx-1.15.4.tar.gz #下载nginx压缩包</span><br><span class="line">tar -zxvf nginx-1.15.4.tar.gz #解压</span><br><span class="line">cd nginx-1.15.4/   #切换到nginx-1.15.4文件夹下</span><br><span class="line">#添加fastdfs-nginx-module模块</span><br><span class="line">./configure --add-module=/usr/local/src/fastdfs-nginx-module/src/ </span><br><span class="line">make &amp;&amp; make install #编译安装</span><br><span class="line">/usr/local/nginx/sbin/nginx  #启动nginx</span><br></pre></td></tr></table></figure><h1 id="Tracker配置"><a href="#Tracker配置" class="headerlink" title="Tracker配置"></a>Tracker配置</h1><p>使用Xftp连接Tracker Server，打开 /etc/fdfs/tracker.conf ，需要修改以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">端口:port=22122  # tracker服务器端口（默认22122,一般不修改）</span><br><span class="line">基础目录:base_path=/home/fastdfs  # tracker运行时会向该目录存储storage的管理数据</span><br><span class="line">轮询策略:store_lookup= 0(轮询向storage存储文件)、1(指定具体的group)、2负载均衡，选择空闲的storage存储</span><br><span class="line">如果选择1策略,则需要指定一个组服务器 store_group = 组ID</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 文件服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layer子父页面互传</title>
      <link href="/layer%E5%AD%90%E7%88%B6%E9%A1%B5%E9%9D%A2%E4%BA%92%E4%BC%A0.html"/>
      <url>/layer%E5%AD%90%E7%88%B6%E9%A1%B5%E9%9D%A2%E4%BA%92%E4%BC%A0.html</url>
      
        <content type="html"><![CDATA[<h1 id="父页面"><a href="#父页面" class="headerlink" title="父页面"></a>父页面</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; id=&quot;test&quot;&gt;弹出&lt;/button&gt;</span><br><span class="line">        &lt;input id=&quot;callBackInput&quot; placeholder=&quot;子页面回显数据&quot; disabled/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/layer/2.3/layer.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; id=&quot;test&quot;&gt;弹出&lt;/button&gt;</span><br><span class="line">        &lt;input id=&quot;callBackInput&quot; placeholder=&quot;子页面回显数据&quot; disabled/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/layer/2.3/layer.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(&apos;#test&apos;).on(&apos;click&apos;,function()&#123;</span><br><span class="line">        layer.open(&#123;</span><br><span class="line">            type: 2,</span><br><span class="line">            title: &apos;子页面&apos;,</span><br><span class="line">            fixed: false, //不固定</span><br><span class="line">            maxmin: true,</span><br><span class="line">            shadeClose: true,</span><br><span class="line">            resize: false,</span><br><span class="line">            move: false,</span><br><span class="line">            area: [&apos;65%&apos;, &quot;60%&quot;],</span><br><span class="line">            btn: [&apos;确定&apos;,&apos;关闭&apos;],</span><br><span class="line">            content: &apos;./zi.html&apos;,</span><br><span class="line">            success: function (layero, index) &#123;</span><br><span class="line">                // 向子页面传递参数</span><br><span class="line">                var iframe = window[&apos;layui-layer-iframe&apos; + index];</span><br><span class="line">                var iframeWin = window[layero.find(&apos;iframe&apos;)[0][&apos;name&apos;]];</span><br><span class="line">                iframeWin.child(2);</span><br><span class="line">                iframe.child(1);</span><br><span class="line">            &#125;,yes:function(index,layero)&#123;</span><br><span class="line">                //获取子页面</span><br><span class="line">                var iframe = window[&apos;layui-layer-iframe&apos; + index];</span><br><span class="line">                console.log(iframe);</span><br><span class="line">                $(&apos;#callBackInput&apos;).val(iframe.callBack());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>open内的属性可以忽略,这边主要看success回调这是打开页面之后的回调。layero、index都可以获取子页面DOM。</p><h1 id="子页面"><a href="#子页面" class="headerlink" title="子页面"></a>子页面</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input id=&quot;testInput&quot;  placeholder=&quot;请输入回显数据&quot; /&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function child(a)&#123;</span><br><span class="line">        alert(a);</span><br><span class="line">    &#125;</span><br><span class="line">    function callBack ()&#123;</span><br><span class="line">        return $(&apos;#testInput&apos;).val();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>child用于接收父页面传过来的值,callBack返回父页面的回显数据。</p><h1 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h1><blockquote><p>直接走静态页面是行不通的,回报跨域异常所以这里我使用了Nginx测试。</p></blockquote><p><img alt data-src="/img/layer/E5D3A1C8-7CC2-410D-9EB0-C21BEA74A9EE.png" class="lozad"><br><img alt data-src="/img/layer/E587439F-B100-4217-9764-2E144B55C251.png" class="lozad"><br>确定和关闭按钮是父页面open中btn属性,关闭可以不用设置回调。<br><img alt data-src="/img/layer/BD23B010-8187-4004-A2CF-F3FE205141DE.png" class="lozad"></p><blockquote><p>线上环境可能要求特殊这里只做简单的测试和记录。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> layer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博杉网站群数据导入</title>
      <link href="/%E5%8D%9A%E6%9D%89%E7%BD%91%E7%AB%99%E7%BE%A4%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5.html"/>
      <url>/%E5%8D%9A%E6%9D%89%E7%BD%91%E7%AB%99%E7%BE%A4%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5.html</url>
      
        <content type="html"><![CDATA[<h1 id="后台设置"><a href="#后台设置" class="headerlink" title="后台设置"></a>后台设置</h1><h2 id="接口授权"><a href="#接口授权" class="headerlink" title="接口授权"></a>接口授权</h2><p>进入系统后台 -&gt; 服务中心 -&gt; API服务,使用AppId为8rpqaqrm的接口服务,如果需要使用API则需要勾选相应的按钮。</p><p><img alt data-src="/img/bcms/8EA023CB-3320-4409-BAFE-23247D18C13C.png" class="lozad"></p><h2 id="IP授权"><a href="#IP授权" class="headerlink" title="IP授权"></a>IP授权</h2><p>如果访问接口提示IP未授权则需要在后台配置具体: 进入系统后台 -&gt; 系统管理 -&gt; 系统配置。IP的话填写提示的IP即可。</p><p><img alt data-src="/img/bcms/1F29EAFC-E9B4-4BCB-8F5B-F51C3170A2AA.png" class="lozad"></p><h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><h2 id="Excel数据"><a href="#Excel数据" class="headerlink" title="Excel数据"></a>Excel数据</h2><blockquote><p>学校方面提供数据的话由于是老系统,则用的是.net+Access开发。这类情况的话需老师提高远程桌面连接和数据文件位置,数据文件一般database里有mdb结尾的数据文件。通过Access打开可以导出Excel,一般数据存放在info导航栏数据的话在xxx_type,其次如果老网站链接有<a href="http://xxxx.xxx.xxx/News.asp" target="_blank" rel="noopener">http://xxxx.xxx.xxx/News.asp</a> 的话新闻数据在xxx_News中也需要一起导出。</p></blockquote><p><img alt data-src="/img/bcms/5520D0E4816B6E65DD4C3F32BE60AD4B.png" class="lozad"></p><p>导出的Excel如下,我们需要修改几个地方（Excel中的列头字段名称）以便程序可以读取到Excel。</p><ul><li>title = 标题</li><li>content = 内容</li><li>Sort1 = 排序一</li><li>Sort2 = 排序二</li><li>Date = 成文日期</li><li>author = 作者</li><li>AddDate = 添加日期</li></ul><p>这几个参数基本不会变如果有Sort3则可能网站数据有三级栏目则就需要加上Sort3 = 排序三,这些名称下方的JavaBean对应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">路径: com.xinkai.bcms.excel.entity</span><br><span class="line">类名: YjsyEntity</span><br><span class="line">@Excel(name = &quot;标题&quot;)</span><br><span class="line">private String title;</span><br><span class="line"></span><br><span class="line">@Excel(name = &quot;内容&quot;)</span><br><span class="line">private String content;</span><br><span class="line"></span><br><span class="line">@Excel(name = &quot;作者&quot;)</span><br><span class="line">private String author;</span><br><span class="line"></span><br><span class="line">@Excel(name = &quot;添加时间&quot;,format = &quot;yyyyMMddHHmmss&quot;)</span><br><span class="line">private java.util.Date releasetime;</span><br><span class="line"></span><br><span class="line">@Excel(name = &quot;成文日期&quot;,format = &quot;yyyyMMdd&quot;)</span><br><span class="line">private Date opendata;</span><br><span class="line"></span><br><span class="line">@Excel(name = &quot;排序一&quot;)</span><br><span class="line">private int sorty;</span><br><span class="line"></span><br><span class="line">@Excel(name = &quot;排序二&quot;)</span><br><span class="line">private int sortye;</span><br><span class="line"></span><br><span class="line">@Excel(name = &quot;排序三&quot;)</span><br><span class="line">private int sortys;</span><br><span class="line"></span><br><span class="line">@Excel(name = &quot;标题链接&quot;)</span><br><span class="line">private String linktitle;</span><br></pre></td></tr></table></figure><p>如果Excel中最后面有url列表中单元格有值,则说明该条记录的内容不是自己的,而是引用第三方网站,也就是该链接是一个链接标题 url = 标题链接。</p><h3 id="代码导入"><a href="#代码导入" class="headerlink" title="代码导入"></a>代码导入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"> void add()&#123;</span><br><span class="line">     List&lt;YjsyEntity&gt; errorList = new ArrayList&lt;&gt;();</span><br><span class="line">     ImportParams params = new ImportParams();</span><br><span class="line">     params.setTitleRows(0);</span><br><span class="line">     params.setHeadRows(1);</span><br><span class="line">     List&lt;YjsyEntity&gt; list;</span><br><span class="line">     list = ExcelImportUtil.importExcel(</span><br><span class="line">             new File(&quot;/Users/liujinyong/Downloads/统战部1Info.xlsx&quot;),</span><br><span class="line">             YjsyEntity.class, params);</span><br><span class="line">     Set&lt;YjsyEntity&gt; set = list.stream().filter(e-&gt;e.getSorty()==250&amp;&amp;e.getSortye()==0&amp;&amp;e.getSortys()==0).collect(Collectors.toSet());</span><br><span class="line">     //数据大小</span><br><span class="line">     System.out.println(&quot;栏目数据:&quot;+set.size());</span><br><span class="line">     for(YjsyEntity yjsyEntity : set)&#123;</span><br><span class="line">         AddEntity addEntity = new AddEntity();</span><br><span class="line">         BeanUtils.copyProperties(yjsyEntity,addEntity);</span><br><span class="line">         addEntity.setReleasetime(DateFormatUtil.dateToString(yjsyEntity.getReleasetime(),&quot;yyyy-MM-dd HH:mm:ss&quot;));</span><br><span class="line">         if((&quot;&quot;).equals(addEntity.getLinktitle()) || addEntity.getLinktitle() == null)&#123;</span><br><span class="line">             addEntity.setLinktitle(null);</span><br><span class="line">         &#125;</span><br><span class="line">         addEntity.setChannelid(&quot;2936&quot;);</span><br><span class="line">         addEntity.setLoginname(&quot;wyp&quot;);</span><br><span class="line">         try &#123;</span><br><span class="line">             infoService.add(addEntity);</span><br><span class="line">         &#125;catch (Exception e)&#123;</span><br><span class="line">             errorList.add(yjsyEntity);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     if(errorList.size() == 0)&#123;</span><br><span class="line">         return;</span><br><span class="line">     &#125;</span><br><span class="line">     Workbook workbook = ExcelExportUtil.exportExcel(new ExportParams(&quot;&quot;,&quot;数据&quot;),</span><br><span class="line">             YjsyEntity .class, errorList);</span><br><span class="line">     FileUtils.export(workbook, &quot;错误数据.xls&quot;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>getSorty getSortye getSortys分别对应排序一、二、三,如果不确定排序则可以到栏目下随便复制一篇文章的标题去Excel里面查询即可知道当前栏目的排序ID。setChannelid 栏目ID可在后台通过鼠标悬浮在栏目上即可显示,只需修改排序和栏目id即可。</p>]]></content>
      
      
      <categories>
          
          <category> 博杉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据导入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastDFS Tracker Storage</title>
      <link href="/FastDFS-Tracker-Storage.html"/>
      <url>/FastDFS-Tracker-Storage.html</url>
      
        <content type="html"><![CDATA[<h1 id="为何使用FastDFS"><a href="#为何使用FastDFS" class="headerlink" title="为何使用FastDFS"></a>为何使用FastDFS</h1><p>业界也有很多出门的分布式文件系统如:GFS、HDFS,其次这些都是通用（大小文件都可以使用）型的分布式文件系统,优点开发体验好但是系统复杂性高、性能一般。而专用的分布式文件系统虽然开发体验极差,但是系统复杂度低并且性能高。<br>FastDFS非常适合存储小文件,FastDFS不对文件进行分块所以少了分块合并的开销,FastDFS采用Socket通信速度很快。</p><h1 id="FastDFS介绍"><a href="#FastDFS介绍" class="headerlink" title="FastDFS介绍"></a>FastDFS介绍</h1><blockquote><p>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。<br>FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。  </p></blockquote><h2 id="Tracker"><a href="#Tracker" class="headerlink" title="Tracker"></a>Tracker</h2><p>Tracker Server 作用是负载均衡和服务调度中心,客户端通过访问Tracker文件上传时,可以根据一些策略（轮询、单机、负载均衡）找到Storage提供的文件上传服务。可以将tracker称为追踪服务器或调度服务器。  </p><p>Tracker Server 可以有多台之前相互平等的提供服务,不存在单点故障。客户端通过轮询策略进行访问,若A无法提供服务就切换B执行。</p><h2 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h2><p>Storage Server 作用是存储文件,客户端上传的文件最终存储在Storage服务器中,Storage使用操作系统的文件系统来管理文件。可以将Storage称为存储服务器。  </p><p>Storage Server 采用集群分组。Storage集群有一个或多个组构成,集群的存储容量为所有组的容量之和。<br>一组由一台或多台Storage组成,组内的Storage是平等关系,不同组的Storage不会进行通信,而同一组的Storage会进行文件同步（备份）,从而保证一组中多个Storage的文件一致。  </p><p>Storage分组（冗余备份、负载均衡）保证了系统的灵活、可控性。客户端上传文件可以单独指定组上传也可以通过Tracker进行调度选择。当一组存储服务器压力过大可以选择在该组增加Storage来扩充服务能力（纵向扩容）,在增加服务器时,会同步已有的文件由系统自动同步,文件同步之后系统自动将新增的服务器切换上线使用。<br>当系统容量存储不足时可加组来增加服务器容量（横向扩容）。</p><p><img alt data-src="/img/fastdfs/C87BAF1A-C090-4FF5-ADAB-5C471CD78EEA.png" class="lozad">  </p><p>多个Client（客户端）进行对多个Tracker（跟踪器）访问,这里Tracker作用为调度中心和负载均衡。<br>Storage会主动向Tracker发送自身状态和存储信息,Tracker通过相应的策略调度Storage来进行文件存储,客户端也可以直接通过Storage存储。</p><h1 id="文件上传流程"><a href="#文件上传流程" class="headerlink" title="文件上传流程"></a>文件上传流程</h1><p><img alt data-src="/img/fastdfs/1C590352-695B-4E27-8AB6-7955079D547D.png" class="lozad"></p><p>Storage先向Tracker提供自身状态、存储信息,客户端通过连接Tracker进行调度,将可用的Storage返回（IP:Port）之后进行文件上传,生成FileID（文件路径）且把上传信息写入磁盘,并将FileID返回客户端,存储文件信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#FileId - group1/M00/03/33/wKMsDtDtgKRjAWWWWWW1235213.sh</span><br></pre></td></tr></table></figure><p>group1:这是分组名称,如果多个分组则:group1、group2以此类推需自行设置。</p><p>M00:虚拟磁盘路径,与配置文件中的storage_path对应如果storage_path0 则对应 M00 、storage_path1 则对应 M01 以此类推。</p><p>03/33:storage会自动在配置路径中创建二级目录,用于存储文件。</p><p>文件名:与上传时不同,由系统自动生成。</p><h1 id="文件下载流程"><a href="#文件下载流程" class="headerlink" title="文件下载流程"></a>文件下载流程</h1><p><img alt data-src="/img/fastdfs/D94F82E1-82CD-48B4-A01D-548FE4EB49F7.png" class="lozad"></p><p>下载流程与上传文件大致相识,客户端连接Tracker之后调度可用的Storage返回,通过FileId进行文件下载返回文件内容。</p>]]></content>
      
      
      <categories>
          
          <category> 文件服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务失效之谜</title>
      <link href="/%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E4%B9%8B%E8%B0%9C.html"/>
      <url>/%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E4%B9%8B%E8%B0%9C.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文章通过SpringBoot2.2.0.RELEASE,mybatis-spring-boot-starter2.1.1构建的测试项目。</p></blockquote><h1 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Nav &#123;</span><br><span class="line"></span><br><span class="line">    private Integer id;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private Integer pid;</span><br><span class="line"></span><br><span class="line">    private String des;</span><br><span class="line"></span><br><span class="line">    private String key;</span><br><span class="line"></span><br><span class="line">    public Nav(String name, Integer pid) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.pid = pid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface NavMapper &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 保存</span><br><span class="line">     * @param nav</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    void save(Nav nav);</span><br><span class="line">    /**</span><br><span class="line">     * 根据Id获取导航栏</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    Nav getById(Integer id);</span><br><span class="line">    /**</span><br><span class="line">     * 更新对象</span><br><span class="line">     * @param nav</span><br><span class="line">     */</span><br><span class="line">    void update(Nav nav);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Mapper-Xml"><a href="#Mapper-Xml" class="headerlink" title="Mapper Xml"></a>Mapper Xml</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;com.animo.mybatis.mapper.NavMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=&quot;save&quot; parameterType=&quot;com.animo.mybatis.entity.Nav&quot;</span><br><span class="line">            useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;</span><br><span class="line">        insert into nav (name,pid) values (#&#123;name&#125;,#&#123;pid&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id=&quot;update&quot;&gt;</span><br><span class="line">      update nav set name = #&#123;name&#125; where id = #&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;getById&quot; resultType=&quot;com.animo.mybatis.entity.Nav&quot;&gt;</span><br><span class="line">        select id,name from nav where id = #&#123;-parameters&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>#{-parameters}:当你在处理一个带有多个形参的构造方法时，很容易搞乱 arg 元素的顺序。 从版本 3.4.3 开始，可以在指定参数名称的前提下，以任意顺序编写 arg 元素。 为了通过名称来引用构造方法参数，你可以添加 @Param 注解，或者使用 ‘-parameters’ 编译选项并启用 useActualParamName 选项（默认开启）来编译项目。</p><h1 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Transactional(rollbackFor = Exception.class)</span><br><span class="line">    public void transactionalTest(Integer id)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //1.先查询</span><br><span class="line">            Nav nav = navMapper.getById(id);</span><br><span class="line">            //2.更新</span><br><span class="line">            nav.setName(&quot;事务测试更新&quot;);</span><br><span class="line">            navMapper.update(nav);</span><br><span class="line">            //3.新增</span><br><span class="line">            navMapper.save(new Nav(&quot;事务测试保存&quot;,3));</span><br><span class="line">            FileOutputStream fileOutputStream = new FileOutputStream(new File(&quot;/usr/local/xxx.html&quot;));</span><br><span class="line">            //.....重要代码</span><br><span class="line">        &#125;catch (IOException e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这边多条SQL操作需开启事务保证原子性,代码中有个文件找不到异常这里是测试异常,不过业务角度的话可能是很重要的代码需要被捕获。</p><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><blockquote><p>事务的话遇到异常就会回滚所以我们带着这个理念测试类执行以下代码之后的数据库前后的状态。</p></blockquote><ul><li>执行前数据状态</li></ul><p><img alt data-src="/img/SpringBoot/52906B39-5CEE-40A3-BE14-369D15BAF23E.png" class="lozad"></p><p>这边代码执行之后肯定是报异常了java.io.FileNotFoundException: /usr/local/xxx.html (Permission denied),很显然事务回滚失效了。  </p><ul><li>执行后数据状态</li></ul><p><img alt data-src="/img/SpringBoot/04BA2820-1CD0-4A2C-BC90-FE74C7E50569.png" class="lozad"></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><blockquote><p>程序运行如果没有错误会自动提交事务,如果程序发生异常则会自动回滚。<br>但是如果使用了try捕获异常（检查时异常）时,一定要注意在catch里面手动回滚否者事务失效。</p></blockquote><h2 id="手动回滚"><a href="#手动回滚" class="headerlink" title="手动回滚"></a>手动回滚</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">    //重要代码</span><br><span class="line">&#125;catch(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">    //重要代码</span><br><span class="line">&#125;catch(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    throw new Exception();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过这边推荐手动回滚,如果有调用者的话抛异常需要一层一层往上直到controller层。<br>以上两种方式可自行测试下效果我这边使用手动回滚事务不会失效。</p><blockquote><p>以上文章内容是目前本人现在的见解,如果有更深层次的话会继续更新/修改。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RestTemplate请求工具类</title>
      <link href="/RestTemplate%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7%E7%B1%BB.html"/>
      <url>/RestTemplate%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7%E7%B1%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line">public class RestTemplateUtil &#123;</span><br><span class="line"></span><br><span class="line">    private static final RestTemplate restTemplate = new RestTemplate();</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        SimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory();</span><br><span class="line">        // 设置连接超时</span><br><span class="line">         requestFactory.setConnectTimeout(5000);</span><br><span class="line">        restTemplate.setRequestFactory(requestFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    // ----------------------------------GET-------------------------------------------------------</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * GET请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url          请求URL</span><br><span class="line">     * @param responseType 返回对象类型</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; get(String url, Class&lt;T&gt; responseType) &#123;</span><br><span class="line">        return restTemplate.getForEntity(url, responseType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * GET请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url          请求URL</span><br><span class="line">     * @param responseType 返回对象类型</span><br><span class="line">     * @param uriVariables URL中的变量，按顺序依次对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; get(String url, Class&lt;T&gt; responseType, Object... uriVariables) &#123;</span><br><span class="line">        return restTemplate.getForEntity(url, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * GET请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url          请求URL</span><br><span class="line">     * @param responseType 返回对象类型</span><br><span class="line">     * @param uriVariables URL中的变量，与Map中的key对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; get(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables) &#123;</span><br><span class="line">        return restTemplate.getForEntity(url, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 带请求头的GET请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url          请求URL</span><br><span class="line">     * @param headers      请求头参数</span><br><span class="line">     * @param responseType 返回对象类型</span><br><span class="line">     * @param uriVariables URL中的变量，按顺序依次对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; get(String url, Map&lt;String, String&gt; headers, Class&lt;T&gt; responseType, Object... uriVariables) &#123;</span><br><span class="line">        HttpHeaders httpHeaders = new HttpHeaders();</span><br><span class="line">        httpHeaders.setAll(headers);</span><br><span class="line">        return get(url, httpHeaders, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 带请求头的GET请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url          请求URL</span><br><span class="line">     * @param headers      请求头参数</span><br><span class="line">     * @param responseType 返回对象类型</span><br><span class="line">     * @param uriVariables URL中的变量，按顺序依次对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; get(String url, HttpHeaders headers, Class&lt;T&gt; responseType, Object... uriVariables) &#123;</span><br><span class="line">        HttpEntity&lt;?&gt; requestEntity = new HttpEntity&lt;&gt;(headers);</span><br><span class="line">        return exchange(url, HttpMethod.GET, requestEntity, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 带请求头的GET请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url          请求URL</span><br><span class="line">     * @param headers      请求头参数</span><br><span class="line">     * @param responseType 返回对象类型</span><br><span class="line">     * @param uriVariables URL中的变量，与Map中的key对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; get(String url, Map&lt;String, String&gt; headers, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables) &#123;</span><br><span class="line">        HttpHeaders httpHeaders = new HttpHeaders();</span><br><span class="line">        httpHeaders.setAll(headers);</span><br><span class="line">        return get(url, httpHeaders, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 带请求头的GET请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url          请求URL</span><br><span class="line">     * @param headers      请求头参数</span><br><span class="line">     * @param responseType 返回对象类型</span><br><span class="line">     * @param uriVariables URL中的变量，与Map中的key对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; get(String url, HttpHeaders headers, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables) &#123;</span><br><span class="line">        HttpEntity&lt;?&gt; requestEntity = new HttpEntity&lt;&gt;(headers);</span><br><span class="line">        return exchange(url, HttpMethod.GET, requestEntity, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ----------------------------------POST-------------------------------------------------------</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * POST请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url          请求URL</span><br><span class="line">     * @param requestBody  请求参数体</span><br><span class="line">     * @param responseType 返回对象类型</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; post(String url, Object requestBody, Class&lt;T&gt; responseType) &#123;</span><br><span class="line">        return restTemplate.postForEntity(url, requestBody, responseType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * POST请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url          请求URL</span><br><span class="line">     * @param requestBody  请求参数体</span><br><span class="line">     * @param responseType 返回对象类型</span><br><span class="line">     * @param uriVariables URL中的变量，按顺序依次对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; post(String url, Object requestBody, Class&lt;T&gt; responseType, Object... uriVariables) &#123;</span><br><span class="line">        return restTemplate.postForEntity(url, requestBody, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * POST请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url          请求URL</span><br><span class="line">     * @param requestBody  请求参数体</span><br><span class="line">     * @param responseType 返回对象类型</span><br><span class="line">     * @param uriVariables URL中的变量，与Map中的key对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; post(String url, Object requestBody, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables) &#123;</span><br><span class="line">        return restTemplate.postForEntity(url, requestBody, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 带请求头的POST请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url          请求URL</span><br><span class="line">     * @param headers      请求头参数</span><br><span class="line">     * @param requestBody  请求参数体</span><br><span class="line">     * @param responseType 返回对象类型</span><br><span class="line">     * @param uriVariables URL中的变量，按顺序依次对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; post(String url, Map&lt;String, String&gt; headers, Object requestBody, Class&lt;T&gt; responseType, Object... uriVariables) &#123;</span><br><span class="line">        HttpHeaders httpHeaders = new HttpHeaders();</span><br><span class="line">        httpHeaders.setAll(headers);</span><br><span class="line">        return post(url, httpHeaders, requestBody, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 带请求头的POST请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url          请求URL</span><br><span class="line">     * @param headers      请求头参数</span><br><span class="line">     * @param requestBody  请求参数体</span><br><span class="line">     * @param responseType 返回对象类型</span><br><span class="line">     * @param uriVariables URL中的变量，按顺序依次对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; post(String url, HttpHeaders headers, Object requestBody, Class&lt;T&gt; responseType, Object... uriVariables) &#123;</span><br><span class="line">        HttpEntity&lt;Object&gt; requestEntity = new HttpEntity&lt;Object&gt;(requestBody, headers);</span><br><span class="line">        return post(url, requestEntity, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 带请求头的POST请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url          请求URL</span><br><span class="line">     * @param headers      请求头参数</span><br><span class="line">     * @param requestBody  请求参数体</span><br><span class="line">     * @param responseType 返回对象类型</span><br><span class="line">     * @param uriVariables URL中的变量，与Map中的key对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; post(String url, Map&lt;String, String&gt; headers, Object requestBody, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables) &#123;</span><br><span class="line">        HttpHeaders httpHeaders = new HttpHeaders();</span><br><span class="line">        httpHeaders.setAll(headers);</span><br><span class="line">        return post(url, httpHeaders, requestBody, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 带请求头的POST请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url          请求URL</span><br><span class="line">     * @param headers      请求头参数</span><br><span class="line">     * @param requestBody  请求参数体</span><br><span class="line">     * @param responseType 返回对象类型</span><br><span class="line">     * @param uriVariables URL中的变量，与Map中的key对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; post(String url, HttpHeaders headers, Object requestBody, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables) &#123;</span><br><span class="line">        HttpEntity&lt;Object&gt; requestEntity = new HttpEntity&lt;Object&gt;(requestBody, headers);</span><br><span class="line">        return post(url, requestEntity, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 自定义请求头和请求体的POST请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url           请求URL</span><br><span class="line">     * @param requestEntity 请求头和请求体封装对象</span><br><span class="line">     * @param responseType  返回对象类型</span><br><span class="line">     * @param uriVariables  URL中的变量，按顺序依次对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; post(String url, HttpEntity&lt;?&gt; requestEntity, Class&lt;T&gt; responseType, Object... uriVariables) &#123;</span><br><span class="line">        return restTemplate.exchange(url, HttpMethod.POST, requestEntity, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 自定义请求头和请求体的POST请求调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url           请求URL</span><br><span class="line">     * @param requestEntity 请求头和请求体封装对象</span><br><span class="line">     * @param responseType  返回对象类型</span><br><span class="line">     * @param uriVariables  URL中的变量，与Map中的key对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; post(String url, HttpEntity&lt;?&gt; requestEntity, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables) &#123;</span><br><span class="line">        return restTemplate.exchange(url, HttpMethod.POST, requestEntity, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ----------------------------------通用方法-------------------------------------------------------</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通用调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url           请求URL</span><br><span class="line">     * @param method        请求方法类型</span><br><span class="line">     * @param requestEntity 请求头和请求体封装对象</span><br><span class="line">     * @param responseType  返回对象类型</span><br><span class="line">     * @param uriVariables  URL中的变量，按顺序依次对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; exchange(String url, HttpMethod method, HttpEntity&lt;?&gt; requestEntity, Class&lt;T&gt; responseType, Object... uriVariables) &#123;</span><br><span class="line">        return restTemplate.exchange(url, method, requestEntity, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通用调用方式</span><br><span class="line">     *</span><br><span class="line">     * @param url           请求URL</span><br><span class="line">     * @param method        请求方法类型</span><br><span class="line">     * @param requestEntity 请求头和请求体封装对象</span><br><span class="line">     * @param responseType  返回对象类型</span><br><span class="line">     * @param uriVariables  URL中的变量，与Map中的key对应</span><br><span class="line">     * @return ResponseEntity 响应对象封装类</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ResponseEntity&lt;T&gt; exchange(String url, HttpMethod method, HttpEntity&lt;?&gt; requestEntity, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables) &#123;</span><br><span class="line">        return restTemplate.exchange(url, method, requestEntity, responseType, uriVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取RestTemplate实例对象，可自由调用其方法</span><br><span class="line">     *</span><br><span class="line">     * @return RestTemplate实例对象</span><br><span class="line">     */</span><br><span class="line">    public static RestTemplate getRestTemplate() &#123;</span><br><span class="line">        return restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac/Linux下工具安装(持续更新中~)</title>
      <link href="/Mac%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85.html"/>
      <url>/Mac%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mac-Maven"><a href="#Mac-Maven" class="headerlink" title="Mac Maven"></a>Mac Maven</h1><ol><li>下载地址 <a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">https://maven.apache.org/download.cgi</a>  </li><li>双击解压之后放到安装路径  </li><li>设置环境变量vim ~/.bash_profile</li></ol><ul><li>export M2_HOME=”/usr/local/apache-maven-3.6.0”  </li><li>export PATH=”$M2_HOME/bin:$PATH”</li></ul><ol start="4"><li>刷新配置文件source ~/.bash_profile</li><li>检查是否安装成功 mvn -v</li></ol><h1 id="Mac-Jmeter"><a href="#Mac-Jmeter" class="headerlink" title="Mac Jmeter"></a>Mac Jmeter</h1><ol><li>下载地址<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">http://jmeter.apache.org/download_jmeter.cgi</a></li><li>双击解压之后放到安装路径</li><li>执行jmeter</li></ol><ul><li>cd /usr/local/apache-jmeter-5.1.1/bin</li><li>sh jmeter</li></ul><ol start="4"><li>设置中文</li></ol><ul><li>Options-&gt;Choose Language-&gt;Chinese（Simplified）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式入门</title>
      <link href="/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8.html"/>
      <url>/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>“Lambda 表达式”(lambda expression)是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。Lambda表达式可以表示闭包（注意和数学传统意义上的不同）。</p></blockquote><h1 id="函数接口"><a href="#函数接口" class="headerlink" title="函数接口"></a>函数接口</h1><p>顾名思义何为函数接口和普通接口又有什么区别？<br>自JDK8以来接口可以有多个默认实现方法（普通接口）。<br><img alt data-src="/img/wechat/44B38720-73AE-4893-8A43-CBA613F6DFDA.png" class="lozad"><br>普通接口上增加@FunctionalInterface即标识为函数接口,与其普通接口的区别在于函数接口只能有一个抽象方法,多个会报错。<br><img alt data-src="/img/wechat/63F019B6-FD74-4ECE-B177-794612718D08.png" class="lozad"><br>JDK8为我们提供了很多函数接口在java.util.function包下。<br><img alt data-src="/img/wechat/D427643F-C8A5-4446-BAAE-2687D5A1AE47.png" class="lozad"><br>函数接口给lambda带来了什么？<br>根据开头介绍Lambda是一个匿名函数,何为匿名函数？我们常见的匿名函数出现在Swing比较多,线程大家也知道举个例子。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Thread thread = new Thread(()-&gt; System.out.println(&quot;123123&quot;));</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这段代码很简单我们创建了个Thread,这里我们使用了需要Runnable接口的构造函数,为什么我们能使用Lambda表达式呢？因为Runnable接口遵循了函数接口设计规则。<br><img alt data-src="/img/wechat/51A5B607-3EB5-4B89-BD9C-601C26AC8BE0.png" class="lozad"><br><img alt data-src="/img/wecgat/FF6594EB-FE78-4858-B262-5461461FF7A0.png" class="lozad"><br>这里我们可以看到Runnable函数接口只有一个方法然而方法没有形参所以我们可以通过()-&gt;逻辑代码这种形式去抒写。</p><h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><p>这里我们通过对集合的练习Lambda让大家有更深入的了解。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class Transaction &#123;</span><br><span class="line">    private final Trader trader;</span><br><span class="line">    private final int year;</span><br><span class="line">    private final int value;</span><br><span class="line">    public Transaction(Trader trader, int year, int value) &#123;</span><br><span class="line">        this.trader = trader;</span><br><span class="line">        this.year = year;</span><br><span class="line">        this.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    public Trader getTrader() &#123;</span><br><span class="line">        return trader;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getYear() &#123;</span><br><span class="line">        return year;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getValue() &#123;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Trader&#123;</span><br><span class="line">    private final String name;</span><br><span class="line">    private final String city;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getCity() &#123;</span><br><span class="line">        return city;</span><br><span class="line">    &#125;</span><br><span class="line">    public Trader(String name, String city) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.city = city;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建集合数据。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Trader raoul = new Trader(&quot;Raoul&quot;, &quot;Cambridge&quot;);</span><br><span class="line">        Trader mario = new Trader(&quot;Mario&quot;,&quot;Milan&quot;);</span><br><span class="line">        Trader alan = new Trader(&quot;Alan&quot;,&quot;Cambridge&quot;);</span><br><span class="line">        Trader brian = new Trader(&quot;Brian&quot;,&quot;Cambridge&quot;);</span><br><span class="line">        List&lt;Transaction&gt; transactions = Arrays.asList(</span><br><span class="line">                new Transaction(brian, 2011, 300),</span><br><span class="line">                new Transaction(raoul, 2012, 1000),</span><br><span class="line">                new Transaction(raoul, 2011, 400),</span><br><span class="line">                new Transaction(mario, 2012, 710),</span><br><span class="line">                new Transaction(mario, 2012, 700),</span><br><span class="line">                new Transaction(alan, 2012, 950)</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><p>1、找出2011年发生的所有交易，并按交易额排序(从低到高)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Transaction&gt; list1 = transactions.stream().</span><br><span class="line">filter(e-&gt;e.getYear()==2011).</span><br><span class="line">sorted(Comparator.comparing(Transaction::getValue)).</span><br><span class="line">collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>首先通过transactions获取Stream API流,这里需要找出2011年所发生的的所有交易所以我们这里使用filter过滤结果集,下方是filter方法源码,可以看到需要的入参是一个函数接口,这里就可以采用Lambda。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);</span><br></pre></td></tr></table></figure><p>Predicate函数接口默认方法test 入参是一个泛型T所以我们可以传递Transaction对象,我们可以采用两种形式写Lambda可以隐式也可以显式,为了方便采用第一种。<br>在filter之后的list已经被过滤了只有2011年的数据,又需要排序这里采用sorted,方法入参又是一个函数接口。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator);源码</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted(Comparator.comparing(Transaction::getValue))代码</span><br></pre></td></tr></table></figure><p>入参我们采用了静态方法默认实现了里面的排序,静态方法入参是一个Function函数接口。<br><img alt data-src="/img/wechat/3B3BA85D-2CEB-40E2-A015-12E88C32E8B8.png" class="lozad"><br>入参我们采用了语法糖Transaction::getValue = e-&gt;e.getValue(),综上所诉此阶段我们已经把2011排序之后的数据组装完成,这时候需要用到collect把组装的数据转换成集合再次输出到结果集这里就完成了筛选和排序,其实lambda和流水线差不多把需要做的事情一步一步做完之后再输出成成品。</p><p>2、交易员都在哪些不同的城市工作过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; list2 = transactions.stream().</span><br><span class="line">map(e-&gt;e.getTrader().getCity()).</span><br><span class="line">collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><p>map主要作用用来拉去对象中的特定属性,因为问题中的不同,所以我们采用toSet方法来去重,也可以采用distinct()在toList。  </p><p>3、查找所有来自于剑桥的交易员，并按姓名排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Trader&gt; list3 = transactions.stream().</span><br><span class="line">map(e-&gt;e.getTrader()).</span><br><span class="line">filter(e-&gt;e.getCity().equals(&quot;Cambridge&quot;)).</span><br><span class="line">sorted(Comparator.comparing(Trader::getName)).</span><br><span class="line">collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><p>因为Trader在Transaction所以我们需要用map把Trader抽取出来之后再进行城市过滤,过滤之后把名字排序在去重相同名字。  </p><p>4、返回所有交易员的姓名字符串，按字母顺序排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String list4 = transactions.stream().</span><br><span class="line">map(e-&gt;e.getTrader().getName()).</span><br><span class="line">distinct().</span><br><span class="line">sorted().</span><br><span class="line">reduce(&quot;&quot;,(a,b)-&gt;a+b);</span><br></pre></td></tr></table></figure><p>通过map把所有交易员的姓名抽取出来之后去重在通过排序默认从小到大，reduce方法就是把两个值结合起来生成新的值。<br>此方法效率不高因为每次迭代都会产生新的String,下方为优化代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tring traderStr = transactions.stream()</span><br><span class="line">.map(transaction -&gt; transaction.getTrader().getName())</span><br><span class="line">.distinct()</span><br><span class="line">.sorted()</span><br><span class="line">.collect(joining());</span><br></pre></td></tr></table></figure><p>5、有没有交易员是在米兰工作的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">boolean list5 = transactions.stream().</span><br><span class="line">anyMatch(e-&gt;e.getTrader().getCity().equals(&quot;Milan&quot;))</span><br></pre></td></tr></table></figure><p>anyMatch入参是一个Predicate函数接口和第一题中的filter入参一样,那为什么不用filter,这里出现个问题为什么不使用filter其效果也是一样的呀?<br>filter属于中间操作可以链接起来,将一个流转换成另一个流。这个操作不会去消耗流其目的是创建新的流所以还在”流水线”并未将其结果返回。与其相反,终端操作会消耗流,以产生一个最终结果,它们通常可以优化”流水线”来缩短计算时间。  </p><p>6、打印生活在剑桥的交易员的所有交易额</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transactions.stream().</span><br><span class="line">filter(e-&gt;&quot;Cambridge&quot;.equals(e.getTrader().getCity())).</span><br><span class="line">map(Transaction::getValue).</span><br><span class="line">forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>过滤出在剑桥的交易员,通过map提取出交易额在循环打印。  </p><p>7、所有交易中，最高的交易额是多少</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; integer =  transactions.stream().</span><br><span class="line">map(Transaction::getValue).</span><br><span class="line">reduce(Integer::max);</span><br></pre></td></tr></table></figure><p>这里返回值是用Optional包裹的,JKD8加入的Optional预防空指针。  </p><p>8、找到交易额最小的交易</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Transaction&gt; transaction = transactions.stream().</span><br><span class="line">reduce((a,b)-&gt;a.getValue()&lt;b.getValue()?a:b);</span><br></pre></td></tr></table></figure><p>9、附加:交易额求和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int value = transactions.stream().</span><br><span class="line">mapToInt(Transaction::getValue).sum();</span><br></pre></td></tr></table></figure><p>以上就是一些基础的Lambda表达式,重要的不是去使用而是去理解该如何写,了解了函数接口之后再通过一系列的语法糖和静态方法,也能随心所欲的写出Lambda,更多关于函数接口和Lambda的高级使用可以购买JDK8实战书籍。</p>]]></content>
      
      
      <categories>
          
          <category> JDK1.8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac Docker Nginx本地化</title>
      <link href="/Mac%20Docker%20Nginx%E6%9C%AC%E5%9C%B0%E5%8C%96.html"/>
      <url>/Mac%20Docker%20Nginx%E6%9C%AC%E5%9C%B0%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<h1 id="宿主机文件"><a href="#宿主机文件" class="headerlink" title="宿主机文件"></a>宿主机文件</h1><p>创建一个临时的Nginx容器来拷贝出配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name tempNginx nginx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp tempNginx:/etc/nginx /usr/local/nginx</span><br></pre></td></tr></table></figure><p>这里我选择了放在/usrl/local目录下,这里会有个权限问题你们可以放在其他目录比如文档、或者用户目录。这边我们进入目录查看一下是否拷贝成功。</p><p><img alt data-src="/img/wechat/C229C620-CA12-4A22-B152-05CB9173E8B5.png" class="lozad"></p><p>这里检查文件存在之后即可删除临时的Nginx容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f tempNginx</span><br></pre></td></tr></table></figure><h1 id="创建Nginx容器"><a href="#创建Nginx容器" class="headerlink" title="创建Nginx容器"></a>创建Nginx容器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --privileged=true --name nginx -d -p 80:80 </span><br><span class="line">-v /usr/local/nginx:/etc/nginx </span><br><span class="line">-v /Users/xxx/Documents/xxx/xxx:/usr/local/xxx/xxx </span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><p>第一个-v做了nginx配置的映射<br>第二个-v做了前端项目的映射<br>这里可能会提示权限问题和拒绝挂载,权限问题的话可以调整文件夹权限，拒绝挂载这边的话需要在Docker图形界面配置。<br><img alt data-src="/img/wechat/996A4AE9-BD83-4494-8B19-A8445B8CE0B0.png" class="lozad"></p><p>此时我们直接编辑本地的nginx.conf在最后一行添加注释,其次我们在进入容器中查看。<br><img alt data-src="/img/wechat/84A071C3-DEA9-4B53-A94E-C5F8AEFD7048.png" class="lozad"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进入容器:docker exec -it nginx bash 进入目录:/etc/nginx</span><br></pre></td></tr></table></figure><p>由于Docker不带有vim命令所以使用cat命令,所以映射这边我们生效了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat nginx.conf</span><br></pre></td></tr></table></figure><p><img alt data-src="/img/wechat/5053387E-6A10-4B95-AFA2-BD3E56F2557C.png" class="lozad"></p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>由于nginx.conf主配置文件中包含了/ect/nginx/conf.d/*.conf所以我在这里进行代理。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    server_name www.xxx.com; #host映射的域名</span><br><span class="line">    #前端页面</span><br><span class="line">    location / &#123;</span><br><span class="line">        alias  路径; #刚才映射路径这里填写容器里面的路径</span><br><span class="line">        index  index.html; #默认访问值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面配置之前我们先把原有的配置先注释掉,修改之后再通过以下命令进行重启。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">已经进入容器: nginx -s reload</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">未进入容器: docker exec -i nginx nginx -s reload</span><br></pre></td></tr></table></figure><p>以上命令执行出现以下结果则通过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019/10/14 11:29:46 [notice] 102#102: signal process started</span><br></pre></td></tr></table></figure><p>这样的话我们就可以通过server_name或者ip地址去访问。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web接入QQ第三方登录</title>
      <link href="/Web%E6%8E%A5%E5%85%A5QQ%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95.html"/>
      <url>/Web%E6%8E%A5%E5%85%A5QQ%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>第三方网站主要通过使用“QQ登录”接入QQ互联开放平台。“QQ登录”是QQ互联开放平台提供给第三方网站的一种服务。“QQ登录”可以让用户使用QQ帐号在第三方网站上登录，分享内容、同步信息，大大降低了用户注册的门槛。同时，第三方网站根据用户提供的绑定信息，将用户在网站上发布的内容同步发布到QQ空间的个人动态中，从而借助QQ空间庞大的用户群，使网站的信息能通过好友关系得到进一步的传播，提升网站的访问量和用户数。</p></blockquote><p><img alt data-src="/img/wechat/67B830CD-98AB-4092-A107-9D04DDEA977F.png" class="lozad"></p><h1 id="账号申请"><a href="#账号申请" class="headerlink" title="账号申请"></a>账号申请</h1><p>进入QQ互联 <a href="https://connect.qq.com。" target="_blank" rel="noopener">https://connect.qq.com。</a><br>右上角点击登录,登录之后点击头像会进入到申请页面。这里我们选择个人接入,需要准备一下手持身份证照片。</p><p><img alt data-src="/img/wechat/91189468-4DF3-488E-AA77-9455C2C2C9D6.png" class="lozad"></p><p>完成注册提交审核之后会有几个小时的等待时间,一般情况都是可以下来的,主要是手持身份证</p><p><img alt data-src="/img/wechat/30F516B7-6D6A-4A1C-A7AA-919E3F49D654.png" class="lozad"></p><p>点击应用管理-&gt;选择网站应用-&gt;创建应用,里面资料都可以随意填写。</p><p><img alt data-src="/img/wechat/A48C57E5-952F-401D-96C8-0C0485C82DD3.png" class="lozad"></p><p>点击创建应用之后会跳到填写网站域名的地方,这里我们还是采用Natapp内网穿透</p><p><img alt data-src="/img/wechat/A20FDDBB-DCCB-4879-8695-B98A7049196A.png" class="lozad"></p><p>创建之后可以再应用管理查看，点击查看会看到相应的应用信息，主要关注appid和回调地址会用到。</p><p><img alt data-src="/img/wechat/2D8B4A5C-9982-48D9-80F1-CF2EB172D67A.png" class="lozad"></p><p><img alt data-src="/img/wechat/762A855B-5BA8-49E4-942A-C293C4E22D53.png" class="lozad"></p><p>下方的平台信息是可以随时修改的,方便我们测试,免费的Natapp会随时更换域名大家如果测试阶段发现错误可能就是映射域名已更换不符合配置域名。</p><p><img alt data-src="/img/wechat/81FBDEF5-E0F5-4284-BACC-D9E03FEA9159.png" class="lozad"></p><h1 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h1><p>创建SpringBoot的Web项目,具体pom如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.6.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.animo.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springboot-qq&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;springboot-qq&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>YML和外部化配置类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line">connect:</span><br><span class="line">  appId: 101744617</span><br><span class="line">  appKey: 8f7784b6b582b1d2117f34b549ad3193</span><br><span class="line">  uri: http://v3gapy.natappfree.cc</span><br><span class="line">  returnUri: $&#123;connect.uri&#125;/callback</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;connect&quot;)</span><br><span class="line">public class ConnectConfig &#123;</span><br><span class="line">    /**</span><br><span class="line">     * appID</span><br><span class="line">     */</span><br><span class="line">    private String appId;</span><br><span class="line">    /**</span><br><span class="line">     * appKey</span><br><span class="line">     */</span><br><span class="line">    private String appKey;</span><br><span class="line">    /**</span><br><span class="line">     * 回调的url</span><br><span class="line">     */</span><br><span class="line">    private String returnUri;</span><br><span class="line">    /**</span><br><span class="line">     * 项目的域名 为了方便测试</span><br><span class="line">     */</span><br><span class="line">    private String uri;</span><br><span class="line">    //省略Get Set</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工具类封装授权URL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author 刘金泳</span><br><span class="line"> * @Date 2019/8/5</span><br><span class="line"> */</span><br><span class="line">public class ConnectUtil &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 授权地址</span><br><span class="line">     * @param appId</span><br><span class="line">     * @param redirectUri</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getAuthorize(String appId,String redirectUri)&#123;</span><br><span class="line">        /**</span><br><span class="line">         * 这里需要随机生成在和客户端传过来的state进行对比,防止CSRF攻击。</span><br><span class="line">         */</span><br><span class="line">        String state = &quot;12n2x94h124vgh1249&quot;;</span><br><span class="line">        String url = &quot;https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=%s&amp;redirect_uri=%s&amp;state=%s&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            return String.format(url,appId,URLEncoder.encode(redirectUri,&quot;UTF-8&quot;),state);</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 获取AccessToken</span><br><span class="line">     * @param appId</span><br><span class="line">     * @param appKey</span><br><span class="line">     * @param code</span><br><span class="line">     * @param redirectUri</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getAccessToken(String appId,String appKey,String code,String redirectUri)&#123;</span><br><span class="line">        String url = &quot;https://graph.qq.com/oauth2.0/token?grant_type=authorization_code&amp;client_id=%s&amp;client_secret=%s&amp;code=%s&amp;redirect_uri=%s&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            return String.format(url,appId,appKey,code,URLEncoder.encode(redirectUri,&quot;UTF-8&quot;));</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 获取openId</span><br><span class="line">     * @param accessToken</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getOpenId(String accessToken)&#123;</span><br><span class="line">        return &quot;https://graph.qq.com/oauth2.0/me?access_token=&quot;+accessToken;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 获取用户信息</span><br><span class="line">     * @param accessToken</span><br><span class="line">     * @param appId</span><br><span class="line">     * @param openId</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getUserInfo(String accessToken , String appId, String openId)&#123;</span><br><span class="line">        String url = &quot;https://graph.qq.com/user/get_user_info?access_token=%s&amp;oauth_consumer_key=%s&amp;openid=%s&quot;;</span><br><span class="line">        return String.format(url,accessToken,appId,openId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器层代码只是简单的作为测试例子,更多逻辑操作还得自行添加。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class CallbackController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private ConnectConfig connectConfig;</span><br><span class="line">    @RequestMapping(&quot;/login&quot;)</span><br><span class="line">    public String qqLogin()&#123;</span><br><span class="line">        return &quot;redirect:&quot;+ ConnectUtil.getAuthorize(connectConfig.getAppId(),connectConfig.getReturnUri());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/callback&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String callBack(HttpServletRequest request)&#123;</span><br><span class="line">        String code = request.getParameter(&quot;code&quot;);</span><br><span class="line">        String state = request.getParameter(&quot;state&quot;);</span><br><span class="line">        String accessTokenUrl = ConnectUtil.getAccessToken(connectConfig.getAppId(),connectConfig.getAppKey(),code,connectConfig.getReturnUri());</span><br><span class="line">        /**</span><br><span class="line">         * 此方法业务逻辑自行设计 需要结合缓存</span><br><span class="line">         */</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取AccessToken</span><br><span class="line">            HttpClientDto accessTokenDto = HttpClientUtil.doGet(accessTokenUrl);</span><br><span class="line">            String [] strings = accessTokenDto.getContent().split(&quot;&amp;&quot;);</span><br><span class="line">            Map&lt;String,String&gt; map = new HashMap&lt;&gt;(16);</span><br><span class="line">            map.put(&quot;access_token&quot;,strings[0].split(&quot;=&quot;)[1]);</span><br><span class="line">            map.put(&quot;expires_in&quot;,strings[1].split(&quot;=&quot;)[1]);</span><br><span class="line">            map.put(&quot;refresh_token&quot;,strings[2].split(&quot;=&quot;)[1]);</span><br><span class="line">            //获取OpenId</span><br><span class="line">            HttpClientDto openDto = HttpClientUtil.doGet(ConnectUtil.getOpenId(map.get(&quot;access_token&quot;)));</span><br><span class="line">            String[] strings1 =  openDto.getContent().split(&quot; &quot;);</span><br><span class="line">            Map&lt;String,Object&gt; openMap = GsonUtil.JsonToMap(strings1[1]);</span><br><span class="line">            //获取用户信息</span><br><span class="line">            HttpClientDto userInfo =  HttpClientUtil.doGet(ConnectUtil.getUserInfo(map.get(&quot;access_token&quot;),connectConfig.getAppId(),openMap.get(&quot;openid&quot;).toString()));</span><br><span class="line">            /**</span><br><span class="line">             * 这里应该是ModeAndView  把头像和昵称放进map和页面一起返回</span><br><span class="line">             */</span><br><span class="line">            return userInfo.getContent();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;回调&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端页面代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;QQ登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;img src=&quot;/image/Connect_logo_5.png&quot; onclick=&quot;toLogin()&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=&quot;http://code.jquery.com/jquery-2.1.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    //在新标签页打开网站</span><br><span class="line">    function toLogin() &#123;</span><br><span class="line">        window.open(&quot;/login&quot;, &quot;TencentLogin&quot;,</span><br><span class="line">            &quot;width=450,height=320,menubar=0,scrollbars=1,resizable=1,status=1,titlebar=0,toolbar=0,location=1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="项目测试"><a href="#项目测试" class="headerlink" title="项目测试"></a>项目测试</h1><p>启动项目访问 <a href="http://p95rqj.natappfree.cc/" target="_blank" rel="noopener">http://p95rqj.natappfree.cc/</a> 具体地址看自己映射,这里我们选了个比较霸气大头的图标。</p><p><img alt data-src="/img/wechat/A920CE72-CA35-4DF9-A93E-267F108720FA.png" class="lozad"></p><p>点击图标之后弹出我们常见的授权地址,只能用创建应用的QQ登录测试。</p><p><img alt data-src="/img/wechat/ADB63E15-F438-450C-BEC9-6890F33EAE55.png" class="lozad"></p><p>选择登录的QQ之后选择登录会进入我们的回调<a href="http://p95rqj.natappfree.cc/callback" target="_blank" rel="noopener">http://p95rqj.natappfree.cc/callback</a> 回调地址会携带code和state,这里我们代码只选择返回用户信息。</p><p><img alt data-src="/img/wechat/EE4396A7-968A-44A6-AABB-D6534C2AF359.png" class="lozad"></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>控制器层代码中HttpClientUtil 和 GsonUtil 、HttpClientDto并未贴出需要从GitHub中获取地址在下方。<br>实际上获取授权地址中的response_type,虽然官方文档指定说是code,但是我看jsdk里面写的是token但是里面返回的参数未不包含refresh_token,后端代码不确定这样做是否符合,这边和大家分享一下。</p><p><img alt data-src="/img/wechat/2D883913-6107-4F3A-A105-5DF5E351FFDB.png" class="lozad"></p><p>具体错误码返回和资源下载、授权流程可以看官方<a href="https://wiki.connect.qq.com/" target="_blank" rel="noopener">https://wiki.connect.qq.com/</a></p><blockquote><p>项目地址:<a href="https://github.com/LJYYAnimo/SpringBoot-Quick-start/tree/master/SpringBoot-QQ" target="_blank" rel="noopener">https://github.com/LJYYAnimo/SpringBoot-Quick-start/tree/master/SpringBoot-QQ</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> QQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QQ </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信H5网页授权</title>
      <link href="/%E5%BE%AE%E4%BF%A1H5%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83.html"/>
      <url>/%E5%BE%AE%E4%BF%A1H5%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83.html</url>
      
        <content type="html"><![CDATA[<h1 id="授权步骤"><a href="#授权步骤" class="headerlink" title="授权步骤"></a>授权步骤</h1><ul><li><p>用户同意授权，获取code</p></li><li><p>通过code换取网页授权access_token</p></li><li><p>拉取用户信息(需scope为 snsapi_userinfo)</p></li></ul><h1 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h1><ul><li><p>SpringBoot:2.1.4.RELEASE</p></li><li><p>weixin-java-mp:3.4.0</p></li></ul><h1 id="公众测试号申请"><a href="#公众测试号申请" class="headerlink" title="公众测试号申请"></a>公众测试号申请</h1><p>开发文档:<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432</a></p><p><img alt data-src="/img/wechat/one.png" class="lozad"></p><p>由于我这边申请过了所以不做过多演示,这里我们需要注意几个地方,我们如果不适用JDSK的话只需要关注红色方框的地方,如果需要使用JSDK如调用相机、分享等。</p><p><img alt data-src="/img/wechat/74419A73-C6A7-4A51-9960-5B42CEB0E8D7.png" class="lozad"></p><p>其次测试号微信授权需要配置回调域名所以我们需要配置Natapp映射的域名,这里配置的地址只需要域名,配置在页面服务-&gt;网页账号-&gt;修改。</p><p><img alt data-src="/img/wechat/BD2B0CB8-CA15-4DE3-84F9-0AC421900F17.png" class="lozad"></p><h1 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h1><p>核心pom.xml。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.github.binarywang&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;weixin-java-mp&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>核心application.yml。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wechat:</span><br><span class="line">  appId: #appId</span><br><span class="line">  appSecret: #appSecret</span><br><span class="line">  token: #服务器消息token</span><br><span class="line">  aesKey: #aesKey</span><br><span class="line">projecturl:</span><br><span class="line">  projectUrl: #natapp调试地址</span><br></pre></td></tr></table></figure><h1 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h1><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><p>以下配置类@Data使用了Lombok文章中没有说明配置的话自己百度或者自己写GetSet。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 可以放一些微信相关的配置属性</span><br><span class="line">*/</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;wechat&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class WeChatAccountConfig &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 设置微信公众号的appid</span><br><span class="line">     */</span><br><span class="line">    private String appId;</span><br><span class="line">    /**</span><br><span class="line">     * 设置微信公众号的app secret</span><br><span class="line">     */</span><br><span class="line">    private String appSecret;</span><br><span class="line">    /**</span><br><span class="line">     * 设置微信公众号的token</span><br><span class="line">     */</span><br><span class="line">    private String token;</span><br><span class="line">    /**</span><br><span class="line">     * 设置微信公众号的EncodingAESKey</span><br><span class="line">     */</span><br><span class="line">    private String aesKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 项目公用一些API地址</span><br><span class="line">*/</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;projecturl&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class ProjectUrlConfig &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 项目访问URL</span><br><span class="line">     */</span><br><span class="line">    private String projectUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SDK配置类"><a href="#SDK配置类" class="headerlink" title="SDK配置类"></a>SDK配置类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class WeChatMpServerConfig &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private WeChatAccountConfig weChatAccountConfig;</span><br><span class="line">    @Bean</span><br><span class="line">    public WxMpService wxMpService()&#123;</span><br><span class="line">        WxMpService wxMpService = new WxMpServiceImpl();</span><br><span class="line">        wxMpService.setWxMpConfigStorage(wxMpConfigStorage());</span><br><span class="line">        return wxMpService;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public WxMpConfigStorage wxMpConfigStorage()&#123;</span><br><span class="line">        WxMpInMemoryConfigStorage wxMpConfigStorage = new WxMpInMemoryConfigStorage();</span><br><span class="line">        wxMpConfigStorage.setAppId(weChatAccountConfig.getAppId());</span><br><span class="line">        wxMpConfigStorage.setSecret(weChatAccountConfig.getAppSecret());</span><br><span class="line">        return wxMpConfigStorage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个配置类的由来主要是因为WxMpService接口有多个实现类自动注入的话IOC不知道使用哪个实现类,还有就是每次调用API接口如查用户、素材之类。每次之前都要设置一个wxMpConfigStorage,所以我们这里使用了一个组件来管理相关的Bean配置。</p><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/oauth/&quot;)</span><br><span class="line">public class WeChatOAuthController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private ProjectUrlConfig projectUrlConfig;</span><br><span class="line">    @Autowired</span><br><span class="line">    private WxMpService wxMpService;</span><br><span class="line">    /**</span><br><span class="line">     * 构造网页授权URL</span><br><span class="line">     * https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</span><br><span class="line">     *</span><br><span class="line">     * @Param returnUrl 可以传入微信端应用地址</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(&quot;authorization&quot;)</span><br><span class="line">    public String authorizationUrl(@RequestParam(value = &quot;returnUrl&quot;,defaultValue = &quot;STATE&quot;) String returnUrl)&#123;</span><br><span class="line">        String url = projectUrlConfig.getProjectUrl()+&quot;/oauth/userInfo&quot;;</span><br><span class="line">        String redirectUrl = wxMpService.oauth2buildAuthorizationUrl(url, WxConsts.OAuth2Scope.SNSAPI_USERINFO, URIUtil.encodeURIComponent(returnUrl));</span><br><span class="line">        return &quot;redirect:&quot;+redirectUrl;</span><br><span class="line">    &#125;</span><br><span class="line">    @GetMapping(&quot;userInfo&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String userInfo(@RequestParam(&quot;code&quot;) String code,@RequestParam(&quot;state&quot;) String state)&#123;</span><br><span class="line">        WxMpOAuth2AccessToken auth2AccessToken;</span><br><span class="line">        WxMpUser wxMpUser;</span><br><span class="line">        try &#123;</span><br><span class="line">            auth2AccessToken = wxMpService.oauth2getAccessToken(code);</span><br><span class="line">            wxMpUser = wxMpService.oauth2getUserInfo(auth2AccessToken,null);</span><br><span class="line">        &#125; catch (WxErrorException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            throw new ProjectException(ResultEnum.WECHAT_ERROR.getCode(),e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;你好！&quot;+wxMpUser.getNickname()+&quot;,openId=&quot;+auth2AccessToken.getOpenId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中我们大体的可以看出authorizationUrl接口是用户在微信端点击的授权API其次方法中才是构建微信授权链接让项目自己去重定向之后会到回调地址userInfo接口这里大家可以自由发挥返回前端页面也可以。</p><h1 id="项目测试"><a href="#项目测试" class="headerlink" title="项目测试"></a>项目测试</h1><p>下方就是微信授权访问接口中的方法和官方参数解析。</p><p><img alt data-src="/img/wechat/BA5A6320-223A-4CE2-A97E-1D8575BE0B3E.png" class="lozad"></p><p><img alt data-src="/img/wechat/B6A77CA0-D907-4981-8024-BACB3A1A20F9.png" class="lozad"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://open.weixin.qq.com/connect/oauth2/authorize?</span><br><span class="line">appid=APPID&amp;</span><br><span class="line">redirect_uri=REDIRECT_URI&amp;</span><br><span class="line">response_type=code&amp;</span><br><span class="line">scope=SCOPE&amp;</span><br><span class="line">state=STATE#wechat_redirect</span><br></pre></td></tr></table></figure><p>项目启动之后我们需要把外部访问请求发送到自己的测试公众号前提需要关注。<br><img alt data-src="/img/wechat/4E9587DA-CC77-49E7-BE8C-9162ACB1E634.png" class="lozad"></p><p><img alt data-src="/img/wechat/E389D301-F12D-4B04-AD9B-F73F85D25838.png" class="lozad"></p><p>以上就是用户授权的操作一般在公众号开发嵌入H5网页常用的第一步还有就是jdsk验证也需要这里不细讲可以百度相关教程,使用了此SDK之后不需要自己去封装一些API操作简便了微信开发。</p>]]></content>
      
      
      <categories>
          
          <category> 微信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> H5 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
