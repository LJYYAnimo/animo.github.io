<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mac/Linux下工具安装(持续更新中~)</title>
      <link href="/2019/10/23/Mac-Linux%E4%B8%8B%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/"/>
      <url>/2019/10/23/Mac-Linux%E4%B8%8B%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac-Maven"><a href="#Mac-Maven" class="headerlink" title="Mac Maven"></a>Mac Maven</h1><ol><li>下载地址 <a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">https://maven.apache.org/download.cgi</a>  </li><li>双击解压之后放到安装路径  </li><li>设置环境变量vim ~/.bash_profile</li></ol><ul><li>export M2_HOME=”/usr/local/apache-maven-3.6.0”  </li><li>export PATH=”$M2_HOME/bin:$PATH”</li></ul><ol start="4"><li>刷新配置文件source ~/.bash_profile</li><li>检查是否安装成功 mvn -v</li></ol><h1 id="Mac-Jmeter"><a href="#Mac-Jmeter" class="headerlink" title="Mac Jmeter"></a>Mac Jmeter</h1><ol><li>下载地址<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">http://jmeter.apache.org/download_jmeter.cgi</a></li><li>双击解压之后放到安装路径</li><li>执行jmeter</li></ol><ul><li>cd /usr/local/apache-jmeter-5.1.1/bin</li><li>sh jmeter</li></ul><ol start="4"><li>设置中文</li></ol><ul><li>Options-&gt;Choose Language-&gt;Chinese（Simplified）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式入门</title>
      <link href="/2019/10/23/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"/>
      <url>/2019/10/23/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“Lambda 表达式”(lambda expression)是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。Lambda表达式可以表示闭包（注意和数学传统意义上的不同）。</p></blockquote><h1 id="函数接口"><a href="#函数接口" class="headerlink" title="函数接口"></a>函数接口</h1><p>顾名思义何为函数接口和普通接口又有什么区别？<br>自JDK8以来接口可以有多个默认实现方法（普通接口）。<br><img alt data-src="/img/wechat/44B38720-73AE-4893-8A43-CBA613F6DFDA.png" class="lozad"><br>普通接口上增加@FunctionalInterface即标识为函数接口,与其普通接口的区别在于函数接口只能有一个抽象方法,多个会报错。<br><img alt data-src="/img/wechat/63F019B6-FD74-4ECE-B177-794612718D08.png" class="lozad"><br>JDK8为我们提供了很多函数接口在java.util.function包下。<br><img alt data-src="/img/wechat/D427643F-C8A5-4446-BAAE-2687D5A1AE47.png" class="lozad"><br>函数接口给lambda带来了什么？<br>根据开头介绍Lambda是一个匿名函数,何为匿名函数？我们常见的匿名函数出现在Swing比较多,线程大家也知道举个例子。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Thread thread = new Thread(()-&gt; System.out.println(&quot;123123&quot;));</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这段代码很简单我们创建了个Thread,这里我们使用了需要Runnable接口的构造函数,为什么我们能使用Lambda表达式呢？因为Runnable接口遵循了函数接口设计规则。<br><img alt data-src="/img/wechat/51A5B607-3EB5-4B89-BD9C-601C26AC8BE0.png" class="lozad"><br><img alt data-src="/img/wecgat/FF6594EB-FE78-4858-B262-5461461FF7A0.png" class="lozad"><br>这里我们可以看到Runnable函数接口只有一个方法然而方法没有形参所以我们可以通过()-&gt;逻辑代码这种形式去抒写。</p><h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><p>这里我们通过对集合的练习Lambda让大家有更深入的了解。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class Transaction &#123;</span><br><span class="line">    private final Trader trader;</span><br><span class="line">    private final int year;</span><br><span class="line">    private final int value;</span><br><span class="line">    public Transaction(Trader trader, int year, int value) &#123;</span><br><span class="line">        this.trader = trader;</span><br><span class="line">        this.year = year;</span><br><span class="line">        this.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    public Trader getTrader() &#123;</span><br><span class="line">        return trader;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getYear() &#123;</span><br><span class="line">        return year;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getValue() &#123;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Trader&#123;</span><br><span class="line">    private final String name;</span><br><span class="line">    private final String city;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getCity() &#123;</span><br><span class="line">        return city;</span><br><span class="line">    &#125;</span><br><span class="line">    public Trader(String name, String city) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.city = city;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建集合数据。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Trader raoul = new Trader(&quot;Raoul&quot;, &quot;Cambridge&quot;);</span><br><span class="line">        Trader mario = new Trader(&quot;Mario&quot;,&quot;Milan&quot;);</span><br><span class="line">        Trader alan = new Trader(&quot;Alan&quot;,&quot;Cambridge&quot;);</span><br><span class="line">        Trader brian = new Trader(&quot;Brian&quot;,&quot;Cambridge&quot;);</span><br><span class="line">        List&lt;Transaction&gt; transactions = Arrays.asList(</span><br><span class="line">                new Transaction(brian, 2011, 300),</span><br><span class="line">                new Transaction(raoul, 2012, 1000),</span><br><span class="line">                new Transaction(raoul, 2011, 400),</span><br><span class="line">                new Transaction(mario, 2012, 710),</span><br><span class="line">                new Transaction(mario, 2012, 700),</span><br><span class="line">                new Transaction(alan, 2012, 950)</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><p>1、找出2011年发生的所有交易，并按交易额排序(从低到高)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Transaction&gt; list1 = transactions.stream().</span><br><span class="line">filter(e-&gt;e.getYear()==2011).</span><br><span class="line">sorted(Comparator.comparing(Transaction::getValue)).</span><br><span class="line">collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>首先通过transactions获取Stream API流,这里需要找出2011年所发生的的所有交易所以我们这里使用filter过滤结果集,下方是filter方法源码,可以看到需要的入参是一个函数接口,这里就可以采用Lambda。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);</span><br></pre></td></tr></table></figure><p>Predicate函数接口默认方法test 入参是一个泛型T所以我们可以传递Transaction对象,我们可以采用两种形式写Lambda可以隐式也可以显式,为了方便采用第一种。<br>在filter之后的list已经被过滤了只有2011年的数据,又需要排序这里采用sorted,方法入参又是一个函数接口。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator);源码</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted(Comparator.comparing(Transaction::getValue))代码</span><br></pre></td></tr></table></figure><p>入参我们采用了静态方法默认实现了里面的排序,静态方法入参是一个Function函数接口。<br><img alt data-src="/img/wechat/3B3BA85D-2CEB-40E2-A015-12E88C32E8B8.png" class="lozad"><br>入参我们采用了语法糖Transaction::getValue = e-&gt;e.getValue(),综上所诉此阶段我们已经把2011排序之后的数据组装完成,这时候需要用到collect把组装的数据转换成集合再次输出到结果集这里就完成了筛选和排序,其实lambda和流水线差不多把需要做的事情一步一步做完之后再输出成成品。</p><p>2、交易员都在哪些不同的城市工作过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; list2 = transactions.stream().</span><br><span class="line">map(e-&gt;e.getTrader().getCity()).</span><br><span class="line">collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><p>map主要作用用来拉去对象中的特定属性,因为问题中的不同,所以我们采用toSet方法来去重,也可以采用distinct()在toList。  </p><p>3、查找所有来自于剑桥的交易员，并按姓名排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Trader&gt; list3 = transactions.stream().</span><br><span class="line">map(e-&gt;e.getTrader()).</span><br><span class="line">filter(e-&gt;e.getCity().equals(&quot;Cambridge&quot;)).</span><br><span class="line">sorted(Comparator.comparing(Trader::getName)).</span><br><span class="line">collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><p>因为Trader在Transaction所以我们需要用map把Trader抽取出来之后再进行城市过滤,过滤之后把名字排序在去重相同名字。  </p><p>4、返回所有交易员的姓名字符串，按字母顺序排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String list4 = transactions.stream().</span><br><span class="line">map(e-&gt;e.getTrader().getName()).</span><br><span class="line">distinct().</span><br><span class="line">sorted().</span><br><span class="line">reduce(&quot;&quot;,(a,b)-&gt;a+b);</span><br></pre></td></tr></table></figure><p>通过map把所有交易员的姓名抽取出来之后去重在通过排序默认从小到大，reduce方法就是把两个值结合起来生成新的值。<br>此方法效率不高因为每次迭代都会产生新的String,下方为优化代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tring traderStr = transactions.stream()</span><br><span class="line">.map(transaction -&gt; transaction.getTrader().getName())</span><br><span class="line">.distinct()</span><br><span class="line">.sorted()</span><br><span class="line">.collect(joining());</span><br></pre></td></tr></table></figure><p>5、有没有交易员是在米兰工作的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">boolean list5 = transactions.stream().</span><br><span class="line">anyMatch(e-&gt;e.getTrader().getCity().equals(&quot;Milan&quot;))</span><br></pre></td></tr></table></figure><p>anyMatch入参是一个Predicate函数接口和第一题中的filter入参一样,那为什么不用filter,这里出现个问题为什么不使用filter其效果也是一样的呀?<br>filter属于中间操作可以链接起来,将一个流转换成另一个流。这个操作不会去消耗流其目的是创建新的流所以还在”流水线”并未将其结果返回。与其相反,终端操作会消耗流,以产生一个最终结果,它们通常可以优化”流水线”来缩短计算时间。  </p><p>6、打印生活在剑桥的交易员的所有交易额</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transactions.stream().</span><br><span class="line">filter(e-&gt;&quot;Cambridge&quot;.equals(e.getTrader().getCity())).</span><br><span class="line">map(Transaction::getValue).</span><br><span class="line">forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>过滤出在剑桥的交易员,通过map提取出交易额在循环打印。  </p><p>7、所有交易中，最高的交易额是多少</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; integer =  transactions.stream().</span><br><span class="line">map(Transaction::getValue).</span><br><span class="line">reduce(Integer::max);</span><br></pre></td></tr></table></figure><p>这里返回值是用Optional包裹的,JKD8加入的Optional预防空指针。  </p><p>8、找到交易额最小的交易</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Transaction&gt; transaction = transactions.stream().</span><br><span class="line">reduce((a,b)-&gt;a.getValue()&lt;b.getValue()?a:b);</span><br></pre></td></tr></table></figure><p>9、附加:交易额求和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int value = transactions.stream().</span><br><span class="line">mapToInt(Transaction::getValue).sum();</span><br></pre></td></tr></table></figure><p>以上就是一些基础的Lambda表达式,重要的不是去使用而是去理解该如何写,了解了函数接口之后再通过一系列的语法糖和静态方法,也能随心所欲的写出Lambda,更多关于函数接口和Lambda的高级使用可以购买JDK8实战书籍。</p>]]></content>
      
      
      <categories>
          
          <category> JDK1.8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac Docker Nginx本地化</title>
      <link href="/2019/10/22/Mac-Docker-Nginx%E6%9C%AC%E5%9C%B0%E5%8C%96/"/>
      <url>/2019/10/22/Mac-Docker-Nginx%E6%9C%AC%E5%9C%B0%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="宿主机文件"><a href="#宿主机文件" class="headerlink" title="宿主机文件"></a>宿主机文件</h1><p>创建一个临时的Nginx容器来拷贝出配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name tempNginx nginx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp tempNginx:/etc/nginx /usr/local/nginx</span><br></pre></td></tr></table></figure><p>这里我选择了放在/usrl/local目录下,这里会有个权限问题你们可以放在其他目录比如文档、或者用户目录。这边我们进入目录查看一下是否拷贝成功。</p><p><img alt data-src="/img/wechat/C229C620-CA12-4A22-B152-05CB9173E8B5.png" class="lozad"></p><p>这里检查文件存在之后即可删除临时的Nginx容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f tempNginx</span><br></pre></td></tr></table></figure><h1 id="创建Nginx容器"><a href="#创建Nginx容器" class="headerlink" title="创建Nginx容器"></a>创建Nginx容器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --privileged=true --name nginx -d -p 80:80 </span><br><span class="line">-v /usr/local/nginx:/etc/nginx </span><br><span class="line">-v /Users/xxx/Documents/xxx/xxx:/usr/local/xxx/xxx </span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><p>第一个-v做了nginx配置的映射<br>第二个-v做了前端项目的映射<br>这里可能会提示权限问题和拒绝挂载,权限问题的话可以调整文件夹权限，拒绝挂载这边的话需要在Docker图形界面配置。<br><img alt data-src="/img/wechat/996A4AE9-BD83-4494-8B19-A8445B8CE0B0.png" class="lozad"></p><p>此时我们直接编辑本地的nginx.conf在最后一行添加注释,其次我们在进入容器中查看。<br><img alt data-src="/img/wechat/84A071C3-DEA9-4B53-A94E-C5F8AEFD7048.png" class="lozad"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进入容器:docker exec -it nginx bash 进入目录:/etc/nginx</span><br></pre></td></tr></table></figure><p>由于Docker不带有vim命令所以使用cat命令,所以映射这边我们生效了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat nginx.conf</span><br></pre></td></tr></table></figure><p><img alt data-src="/img/wechat/5053387E-6A10-4B95-AFA2-BD3E56F2557C.png" class="lozad"></p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>由于nginx.conf主配置文件中包含了/ect/nginx/conf.d/*.conf所以我在这里进行代理。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    server_name www.xxx.com; #host映射的域名</span><br><span class="line">    #前端页面</span><br><span class="line">    location / &#123;</span><br><span class="line">        alias  路径; #刚才映射路径这里填写容器里面的路径</span><br><span class="line">        index  index.html; #默认访问值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面配置之前我们先把原有的配置先注释掉,修改之后再通过以下命令进行重启。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">已经进入容器: nginx -s reload</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">未进入容器: docker exec -i nginx nginx -s reload</span><br></pre></td></tr></table></figure><p>以上命令执行出现以下结果则通过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019/10/14 11:29:46 [notice] 102#102: signal process started</span><br></pre></td></tr></table></figure><p>这样的话我们就可以通过server_name或者ip地址去访问。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web接入QQ第三方登录</title>
      <link href="/2019/10/22/Web%E6%8E%A5%E5%85%A5QQ%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
      <url>/2019/10/22/Web%E6%8E%A5%E5%85%A5QQ%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>第三方网站主要通过使用“QQ登录”接入QQ互联开放平台。“QQ登录”是QQ互联开放平台提供给第三方网站的一种服务。“QQ登录”可以让用户使用QQ帐号在第三方网站上登录，分享内容、同步信息，大大降低了用户注册的门槛。同时，第三方网站根据用户提供的绑定信息，将用户在网站上发布的内容同步发布到QQ空间的个人动态中，从而借助QQ空间庞大的用户群，使网站的信息能通过好友关系得到进一步的传播，提升网站的访问量和用户数。</p></blockquote><p><img alt data-src="/img/wechat/67B830CD-98AB-4092-A107-9D04DDEA977F.png" class="lozad"></p><h1 id="账号申请"><a href="#账号申请" class="headerlink" title="账号申请"></a>账号申请</h1><p>进入QQ互联 <a href="https://connect.qq.com。" target="_blank" rel="noopener">https://connect.qq.com。</a><br>右上角点击登录,登录之后点击头像会进入到申请页面。这里我们选择个人接入,需要准备一下手持身份证照片。</p><p><img alt data-src="/img/wechat/91189468-4DF3-488E-AA77-9455C2C2C9D6.png" class="lozad"></p><p>完成注册提交审核之后会有几个小时的等待时间,一般情况都是可以下来的,主要是手持身份证</p><p><img alt data-src="/img/wechat/30F516B7-6D6A-4A1C-A7AA-919E3F49D654.png" class="lozad"></p><p>点击应用管理-&gt;选择网站应用-&gt;创建应用,里面资料都可以随意填写。</p><p><img alt data-src="/img/wechat/A48C57E5-952F-401D-96C8-0C0485C82DD3.png" class="lozad"></p><p>点击创建应用之后会跳到填写网站域名的地方,这里我们还是采用Natapp内网穿透</p><p><img alt data-src="/img/wechat/A20FDDBB-DCCB-4879-8695-B98A7049196A.png" class="lozad"></p><p>创建之后可以再应用管理查看，点击查看会看到相应的应用信息，主要关注appid和回调地址会用到。</p><p><img alt data-src="/img/wechat/2D8B4A5C-9982-48D9-80F1-CF2EB172D67A.png" class="lozad"></p><p><img alt data-src="/img/wechat/762A855B-5BA8-49E4-942A-C293C4E22D53.png" class="lozad"></p><p>下方的平台信息是可以随时修改的,方便我们测试,免费的Natapp会随时更换域名大家如果测试阶段发现错误可能就是映射域名已更换不符合配置域名。</p><p><img alt data-src="/img/wechat/81FBDEF5-E0F5-4284-BACC-D9E03FEA9159.png" class="lozad"></p><h1 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h1><p>创建SpringBoot的Web项目,具体pom如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.6.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.animo.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springboot-qq&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;springboot-qq&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>YML和外部化配置类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line">connect:</span><br><span class="line">  appId: 101744617</span><br><span class="line">  appKey: 8f7784b6b582b1d2117f34b549ad3193</span><br><span class="line">  uri: http://v3gapy.natappfree.cc</span><br><span class="line">  returnUri: $&#123;connect.uri&#125;/callback</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;connect&quot;)</span><br><span class="line">public class ConnectConfig &#123;</span><br><span class="line">    /**</span><br><span class="line">     * appID</span><br><span class="line">     */</span><br><span class="line">    private String appId;</span><br><span class="line">    /**</span><br><span class="line">     * appKey</span><br><span class="line">     */</span><br><span class="line">    private String appKey;</span><br><span class="line">    /**</span><br><span class="line">     * 回调的url</span><br><span class="line">     */</span><br><span class="line">    private String returnUri;</span><br><span class="line">    /**</span><br><span class="line">     * 项目的域名 为了方便测试</span><br><span class="line">     */</span><br><span class="line">    private String uri;</span><br><span class="line">    //省略Get Set</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工具类封装授权URL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author 刘金泳</span><br><span class="line"> * @Date 2019/8/5</span><br><span class="line"> */</span><br><span class="line">public class ConnectUtil &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 授权地址</span><br><span class="line">     * @param appId</span><br><span class="line">     * @param redirectUri</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getAuthorize(String appId,String redirectUri)&#123;</span><br><span class="line">        /**</span><br><span class="line">         * 这里需要随机生成在和客户端传过来的state进行对比,防止CSRF攻击。</span><br><span class="line">         */</span><br><span class="line">        String state = &quot;12n2x94h124vgh1249&quot;;</span><br><span class="line">        String url = &quot;https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=%s&amp;redirect_uri=%s&amp;state=%s&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            return String.format(url,appId,URLEncoder.encode(redirectUri,&quot;UTF-8&quot;),state);</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 获取AccessToken</span><br><span class="line">     * @param appId</span><br><span class="line">     * @param appKey</span><br><span class="line">     * @param code</span><br><span class="line">     * @param redirectUri</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getAccessToken(String appId,String appKey,String code,String redirectUri)&#123;</span><br><span class="line">        String url = &quot;https://graph.qq.com/oauth2.0/token?grant_type=authorization_code&amp;client_id=%s&amp;client_secret=%s&amp;code=%s&amp;redirect_uri=%s&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            return String.format(url,appId,appKey,code,URLEncoder.encode(redirectUri,&quot;UTF-8&quot;));</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 获取openId</span><br><span class="line">     * @param accessToken</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getOpenId(String accessToken)&#123;</span><br><span class="line">        return &quot;https://graph.qq.com/oauth2.0/me?access_token=&quot;+accessToken;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 获取用户信息</span><br><span class="line">     * @param accessToken</span><br><span class="line">     * @param appId</span><br><span class="line">     * @param openId</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getUserInfo(String accessToken , String appId, String openId)&#123;</span><br><span class="line">        String url = &quot;https://graph.qq.com/user/get_user_info?access_token=%s&amp;oauth_consumer_key=%s&amp;openid=%s&quot;;</span><br><span class="line">        return String.format(url,accessToken,appId,openId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器层代码只是简单的作为测试例子,更多逻辑操作还得自行添加。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class CallbackController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private ConnectConfig connectConfig;</span><br><span class="line">    @RequestMapping(&quot;/login&quot;)</span><br><span class="line">    public String qqLogin()&#123;</span><br><span class="line">        return &quot;redirect:&quot;+ ConnectUtil.getAuthorize(connectConfig.getAppId(),connectConfig.getReturnUri());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/callback&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String callBack(HttpServletRequest request)&#123;</span><br><span class="line">        String code = request.getParameter(&quot;code&quot;);</span><br><span class="line">        String state = request.getParameter(&quot;state&quot;);</span><br><span class="line">        String accessTokenUrl = ConnectUtil.getAccessToken(connectConfig.getAppId(),connectConfig.getAppKey(),code,connectConfig.getReturnUri());</span><br><span class="line">        /**</span><br><span class="line">         * 此方法业务逻辑自行设计 需要结合缓存</span><br><span class="line">         */</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取AccessToken</span><br><span class="line">            HttpClientDto accessTokenDto = HttpClientUtil.doGet(accessTokenUrl);</span><br><span class="line">            String [] strings = accessTokenDto.getContent().split(&quot;&amp;&quot;);</span><br><span class="line">            Map&lt;String,String&gt; map = new HashMap&lt;&gt;(16);</span><br><span class="line">            map.put(&quot;access_token&quot;,strings[0].split(&quot;=&quot;)[1]);</span><br><span class="line">            map.put(&quot;expires_in&quot;,strings[1].split(&quot;=&quot;)[1]);</span><br><span class="line">            map.put(&quot;refresh_token&quot;,strings[2].split(&quot;=&quot;)[1]);</span><br><span class="line">            //获取OpenId</span><br><span class="line">            HttpClientDto openDto = HttpClientUtil.doGet(ConnectUtil.getOpenId(map.get(&quot;access_token&quot;)));</span><br><span class="line">            String[] strings1 =  openDto.getContent().split(&quot; &quot;);</span><br><span class="line">            Map&lt;String,Object&gt; openMap = GsonUtil.JsonToMap(strings1[1]);</span><br><span class="line">            //获取用户信息</span><br><span class="line">            HttpClientDto userInfo =  HttpClientUtil.doGet(ConnectUtil.getUserInfo(map.get(&quot;access_token&quot;),connectConfig.getAppId(),openMap.get(&quot;openid&quot;).toString()));</span><br><span class="line">            /**</span><br><span class="line">             * 这里应该是ModeAndView  把头像和昵称放进map和页面一起返回</span><br><span class="line">             */</span><br><span class="line">            return userInfo.getContent();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;回调&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端页面代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;QQ登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;img src=&quot;/image/Connect_logo_5.png&quot; onclick=&quot;toLogin()&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=&quot;http://code.jquery.com/jquery-2.1.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    //在新标签页打开网站</span><br><span class="line">    function toLogin() &#123;</span><br><span class="line">        window.open(&quot;/login&quot;, &quot;TencentLogin&quot;,</span><br><span class="line">            &quot;width=450,height=320,menubar=0,scrollbars=1,resizable=1,status=1,titlebar=0,toolbar=0,location=1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="项目测试"><a href="#项目测试" class="headerlink" title="项目测试"></a>项目测试</h1><p>启动项目访问 <a href="http://p95rqj.natappfree.cc/" target="_blank" rel="noopener">http://p95rqj.natappfree.cc/</a> 具体地址看自己映射,这里我们选了个比较霸气大头的图标。</p><p><img alt data-src="/img/wechat/A920CE72-CA35-4DF9-A93E-267F108720FA.png" class="lozad"></p><p>点击图标之后弹出我们常见的授权地址,只能用创建应用的QQ登录测试。</p><p><img alt data-src="/img/wechat/ADB63E15-F438-450C-BEC9-6890F33EAE55.png" class="lozad"></p><p>选择登录的QQ之后选择登录会进入我们的回调<a href="http://p95rqj.natappfree.cc/callback" target="_blank" rel="noopener">http://p95rqj.natappfree.cc/callback</a> 回调地址会携带code和state,这里我们代码只选择返回用户信息。</p><p><img alt data-src="/img/wechat/EE4396A7-968A-44A6-AABB-D6534C2AF359.png" class="lozad"></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>控制器层代码中HttpClientUtil 和 GsonUtil 、HttpClientDto并未贴出需要从GitHub中获取地址在下方。<br>实际上获取授权地址中的response_type,虽然官方文档指定说是code,但是我看jsdk里面写的是token但是里面返回的参数未不包含refresh_token,后端代码不确定这样做是否符合,这边和大家分享一下。</p><p><img alt data-src="/img/wechat/2D883913-6107-4F3A-A105-5DF5E351FFDB.png" class="lozad"></p><p>具体错误码返回和资源下载、授权流程可以看官方<a href="https://wiki.connect.qq.com/" target="_blank" rel="noopener">https://wiki.connect.qq.com/</a></p><blockquote><p>项目地址:<a href="https://github.com/LJYYAnimo/SpringBoot-Quick-start/tree/master/SpringBoot-QQ" target="_blank" rel="noopener">https://github.com/LJYYAnimo/SpringBoot-Quick-start/tree/master/SpringBoot-QQ</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> QQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QQ </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信H5网页授权</title>
      <link href="/2019/10/22/%E5%BE%AE%E4%BF%A1H5%E6%8E%88%E6%9D%83/"/>
      <url>/2019/10/22/%E5%BE%AE%E4%BF%A1H5%E6%8E%88%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="授权步骤"><a href="#授权步骤" class="headerlink" title="授权步骤"></a>授权步骤</h1><ul><li><p>用户同意授权，获取code</p></li><li><p>通过code换取网页授权access_token</p></li><li><p>拉取用户信息(需scope为 snsapi_userinfo)</p></li></ul><h1 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h1><ul><li><p>SpringBoot:2.1.4.RELEASE</p></li><li><p>weixin-java-mp:3.4.0</p></li></ul><h1 id="公众测试号申请"><a href="#公众测试号申请" class="headerlink" title="公众测试号申请"></a>公众测试号申请</h1><p>开发文档:<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432</a></p><p><img alt data-src="/img/wechat/one.png" class="lozad"></p><p>由于我这边申请过了所以不做过多演示,这里我们需要注意几个地方,我们如果不适用JDSK的话只需要关注红色方框的地方,如果需要使用JSDK如调用相机、分享等。</p><p><img alt data-src="/img/wechat/74419A73-C6A7-4A51-9960-5B42CEB0E8D7.png" class="lozad"></p><p>其次测试号微信授权需要配置回调域名所以我们需要配置Natapp映射的域名,这里配置的地址只需要域名,配置在页面服务-&gt;网页账号-&gt;修改。</p><p><img alt data-src="/img/wechat/BD2B0CB8-CA15-4DE3-84F9-0AC421900F17.png" class="lozad"></p><h1 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h1><p>核心pom.xml。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.github.binarywang&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;weixin-java-mp&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>核心application.yml。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wechat:</span><br><span class="line">  appId: #appId</span><br><span class="line">  appSecret: #appSecret</span><br><span class="line">  token: #服务器消息token</span><br><span class="line">  aesKey: #aesKey</span><br><span class="line">projecturl:</span><br><span class="line">  projectUrl: #natapp调试地址</span><br></pre></td></tr></table></figure><h1 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h1><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><p>以下配置类@Data使用了Lombok文章中没有说明配置的话自己百度或者自己写GetSet。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 可以放一些微信相关的配置属性</span><br><span class="line">*/</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;wechat&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class WeChatAccountConfig &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 设置微信公众号的appid</span><br><span class="line">     */</span><br><span class="line">    private String appId;</span><br><span class="line">    /**</span><br><span class="line">     * 设置微信公众号的app secret</span><br><span class="line">     */</span><br><span class="line">    private String appSecret;</span><br><span class="line">    /**</span><br><span class="line">     * 设置微信公众号的token</span><br><span class="line">     */</span><br><span class="line">    private String token;</span><br><span class="line">    /**</span><br><span class="line">     * 设置微信公众号的EncodingAESKey</span><br><span class="line">     */</span><br><span class="line">    private String aesKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 项目公用一些API地址</span><br><span class="line">*/</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;projecturl&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class ProjectUrlConfig &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 项目访问URL</span><br><span class="line">     */</span><br><span class="line">    private String projectUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SDK配置类"><a href="#SDK配置类" class="headerlink" title="SDK配置类"></a>SDK配置类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class WeChatMpServerConfig &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private WeChatAccountConfig weChatAccountConfig;</span><br><span class="line">    @Bean</span><br><span class="line">    public WxMpService wxMpService()&#123;</span><br><span class="line">        WxMpService wxMpService = new WxMpServiceImpl();</span><br><span class="line">        wxMpService.setWxMpConfigStorage(wxMpConfigStorage());</span><br><span class="line">        return wxMpService;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public WxMpConfigStorage wxMpConfigStorage()&#123;</span><br><span class="line">        WxMpInMemoryConfigStorage wxMpConfigStorage = new WxMpInMemoryConfigStorage();</span><br><span class="line">        wxMpConfigStorage.setAppId(weChatAccountConfig.getAppId());</span><br><span class="line">        wxMpConfigStorage.setSecret(weChatAccountConfig.getAppSecret());</span><br><span class="line">        return wxMpConfigStorage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个配置类的由来主要是因为WxMpService接口有多个实现类自动注入的话IOC不知道使用哪个实现类,还有就是每次调用API接口如查用户、素材之类。每次之前都要设置一个wxMpConfigStorage,所以我们这里使用了一个组件来管理相关的Bean配置。</p><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/oauth/&quot;)</span><br><span class="line">public class WeChatOAuthController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private ProjectUrlConfig projectUrlConfig;</span><br><span class="line">    @Autowired</span><br><span class="line">    private WxMpService wxMpService;</span><br><span class="line">    /**</span><br><span class="line">     * 构造网页授权URL</span><br><span class="line">     * https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</span><br><span class="line">     *</span><br><span class="line">     * @Param returnUrl 可以传入微信端应用地址</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(&quot;authorization&quot;)</span><br><span class="line">    public String authorizationUrl(@RequestParam(value = &quot;returnUrl&quot;,defaultValue = &quot;STATE&quot;) String returnUrl)&#123;</span><br><span class="line">        String url = projectUrlConfig.getProjectUrl()+&quot;/oauth/userInfo&quot;;</span><br><span class="line">        String redirectUrl = wxMpService.oauth2buildAuthorizationUrl(url, WxConsts.OAuth2Scope.SNSAPI_USERINFO, URIUtil.encodeURIComponent(returnUrl));</span><br><span class="line">        return &quot;redirect:&quot;+redirectUrl;</span><br><span class="line">    &#125;</span><br><span class="line">    @GetMapping(&quot;userInfo&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String userInfo(@RequestParam(&quot;code&quot;) String code,@RequestParam(&quot;state&quot;) String state)&#123;</span><br><span class="line">        WxMpOAuth2AccessToken auth2AccessToken;</span><br><span class="line">        WxMpUser wxMpUser;</span><br><span class="line">        try &#123;</span><br><span class="line">            auth2AccessToken = wxMpService.oauth2getAccessToken(code);</span><br><span class="line">            wxMpUser = wxMpService.oauth2getUserInfo(auth2AccessToken,null);</span><br><span class="line">        &#125; catch (WxErrorException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            throw new ProjectException(ResultEnum.WECHAT_ERROR.getCode(),e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;你好！&quot;+wxMpUser.getNickname()+&quot;,openId=&quot;+auth2AccessToken.getOpenId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中我们大体的可以看出authorizationUrl接口是用户在微信端点击的授权API其次方法中才是构建微信授权链接让项目自己去重定向之后会到回调地址userInfo接口这里大家可以自由发挥返回前端页面也可以。</p><h1 id="项目测试"><a href="#项目测试" class="headerlink" title="项目测试"></a>项目测试</h1><p>下方就是微信授权访问接口中的方法和官方参数解析。</p><p><img alt data-src="/img/wechat/BA5A6320-223A-4CE2-A97E-1D8575BE0B3E.png" class="lozad"></p><p><img alt data-src="/img/wechat/B6A77CA0-D907-4981-8024-BACB3A1A20F9.png" class="lozad"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://open.weixin.qq.com/connect/oauth2/authorize?</span><br><span class="line">appid=APPID&amp;</span><br><span class="line">redirect_uri=REDIRECT_URI&amp;</span><br><span class="line">response_type=code&amp;</span><br><span class="line">scope=SCOPE&amp;</span><br><span class="line">state=STATE#wechat_redirect</span><br></pre></td></tr></table></figure><p>项目启动之后我们需要把外部访问请求发送到自己的测试公众号前提需要关注。<br><img alt data-src="/img/wechat/4E9587DA-CC77-49E7-BE8C-9162ACB1E634.png" class="lozad"></p><p><img alt data-src="/img/wechat/E389D301-F12D-4B04-AD9B-F73F85D25838.png" class="lozad"></p><p>以上就是用户授权的操作一般在公众号开发嵌入H5网页常用的第一步还有就是jdsk验证也需要这里不细讲可以百度相关教程,使用了此SDK之后不需要自己去封装一些API操作简便了微信开发。</p>]]></content>
      
      
      <categories>
          
          <category> 微信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> H5 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
